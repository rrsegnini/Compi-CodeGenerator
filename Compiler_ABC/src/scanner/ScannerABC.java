/* The following code was generated by JFlex 1.6.1 */

 /* Secciï¿½n de declaraciones de JFlex */
package scanner;
import java_cup.runtime.*;
import parser.sym;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/SegundoSemestre2018/Compiladores e Interpretes/Proyectos/Proyecto2/Parser_ABC/Parser_ABC/src/scanner/ScannerABC.flex</tt>
 */
public class ScannerABC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\4\1\2\1\7\1\7\1\3\22\0\1\1\1\65"+
    "\1\73\1\66\1\65\1\65\1\65\1\0\1\26\1\31\1\27\1\64"+
    "\1\57\1\13\1\11\1\33\1\10\1\6\10\6\1\61\1\60\1\25"+
    "\1\24\1\23\1\0\1\65\1\14\1\34\1\46\1\16\1\12\1\40"+
    "\1\44\1\53\1\42\1\5\1\50\1\43\1\54\1\15\1\17\1\45"+
    "\1\5\1\20\1\52\1\21\1\55\1\56\1\37\1\22\1\35\1\5"+
    "\1\62\1\0\1\63\1\65\1\5\1\0\1\14\1\34\1\46\1\16"+
    "\1\36\1\40\1\44\1\53\1\42\1\5\1\50\1\43\1\54\1\15"+
    "\1\17\1\45\1\5\1\20\1\52\1\21\1\55\1\56\1\37\1\22"+
    "\1\35\1\5\1\32\1\4\1\30\7\0\1\7\33\0\1\72\30\0"+
    "\1\70\4\0\1\70\2\0\1\67\1\71\36\0\1\67\1\71\114\0"+
    "\2\41\115\0\1\51\u1ea8\0\1\7\1\7\u0100\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\1\4\2\5\1\6\1\4"+
    "\1\7\7\4\1\10\1\11\1\10\1\12\1\13\1\14"+
    "\1\15\1\13\3\4\1\2\5\4\1\2\3\4\1\16"+
    "\1\17\1\20\1\6\1\13\1\21\3\2\1\22\1\4"+
    "\1\21\2\0\1\23\1\24\5\0\1\24\2\4\1\13"+
    "\2\4\1\0\1\4\1\25\1\0\1\10\1\26\1\4"+
    "\1\27\4\4\1\6\1\10\1\15\2\0\1\23\2\30"+
    "\3\4\1\0\4\4\1\0\2\4\1\31\1\32\1\31"+
    "\1\32\5\4\2\0\4\4\1\13\4\21\2\0\1\33"+
    "\2\22\1\34\1\35\1\0\1\36\1\0\1\4\2\31"+
    "\7\4\1\0\1\15\3\0\1\23\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\1\37\1\0\1\4\1\40"+
    "\1\0\1\40\6\4\1\0\2\4\1\41\1\21\1\22"+
    "\1\42\1\35\1\23\1\0\1\35\2\43\1\44\2\4"+
    "\1\45\1\46\1\30\2\0\1\23\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\1\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\1\0\1\4\1\21"+
    "\1\0\1\47\1\4\1\0\1\23\1\0\1\23\2\50"+
    "\2\51\2\52\2\53\1\4\1\0\2\4\2\54\1\0"+
    "\1\4\2\55\1\21\2\47\1\0\1\23\3\0\1\23"+
    "\1\0\3\4\2\56\1\21\2\0\1\47\1\0\1\23"+
    "\1\0\1\23\1\0\1\4\1\57\1\4\1\21\1\0"+
    "\2\47\2\0\1\23\2\60\1\4\1\21\2\0\1\61"+
    "\5\0\1\23\1\0\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\74\0\u0438\0\u0474\0\u04b0\0\74"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\74"+
    "\0\74\0\74\0\74\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0168\0\u0c30\0\u0c6c\0\u0ca8\0\74"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\360\0\360"+
    "\0\u0e4c\0\360\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\74"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\74\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\74\0\u13b0\0\360\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u0b40\0\u18d8\0\u1914\0\360\0\u1950\0\u198c"+
    "\0\74\0\360\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\74\0\u1f68\0\360\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\360\0\u21c0"+
    "\0\u21fc\0\u0b40\0\u2238\0\u2274\0\u22b0\0\u22b0\0\74\0\360"+
    "\0\360\0\u22ec\0\u2328\0\360\0\360\0\u1be4\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940"+
    "\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\74"+
    "\0\360\0\74\0\360\0\74\0\360\0\74\0\360\0\u2b20"+
    "\0\u2b5c\0\u2b98\0\u2bd4\0\74\0\360\0\u2c10\0\u2c4c\0\74"+
    "\0\360\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\74\0\360"+
    "\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138"+
    "\0\u3174\0\u31b0\0\360\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc"+
    "\0\u3318\0\u3354\0\u3390\0\74\0\360\0\u33cc\0\u3408\0\u3444"+
    "\0\u3480\0\360\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\74"+
    "\0\u35e8\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\2\1\30\1\31\1\32\1\33\1\6\1\12\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\2"+
    "\1\6\1\44\1\45\2\6\1\46\1\47\1\50\1\51"+
    "\1\52\2\53\1\54\1\55\1\56\1\57\1\2\1\60"+
    "\1\2\1\61\75\0\1\3\2\0\1\3\71\0\1\4"+
    "\76\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\7\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\7\0"+
    "\1\66\1\7\1\0\1\7\1\67\1\66\1\0\7\66"+
    "\4\0\1\70\4\0\5\66\1\0\5\66\1\0\1\66"+
    "\1\0\5\66\6\0\2\70\1\71\1\0\1\72\1\0"+
    "\1\73\5\0\1\66\1\74\1\0\1\74\1\67\1\66"+
    "\1\0\7\66\4\0\1\70\4\0\5\66\1\0\5\66"+
    "\1\0\1\66\1\0\5\66\6\0\2\70\1\71\1\0"+
    "\1\72\1\0\1\73\6\0\1\75\1\0\1\75\70\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\1\6"+
    "\1\76\5\6\11\0\5\6\1\0\1\6\1\77\3\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\15\0\1\100\10\0\1\100\54\0\1\6"+
    "\1\62\1\0\1\62\1\0\1\6\1\0\1\6\1\101"+
    "\5\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\7\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\3\6"+
    "\1\102\3\6\11\0\5\6\1\103\1\104\4\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\3\6\1\105\3\6\11\0\5\6\1\106\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\4\6\1\107\2\6\11\0\4\6\1\110"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\111\1\0\7\6\11\0\2\6\1\111"+
    "\2\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\3\6\1\112\1\113"+
    "\2\6\11\0\1\6\1\114\3\6\1\0\5\6\1\0"+
    "\1\6\1\0\1\6\1\115\3\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\7\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\6\1\0\3\6\1\116\3\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\25\0\1\117\1\120\72\0"+
    "\2\120\1\117\75\0\1\121\51\0\1\66\1\122\1\0"+
    "\1\122\1\0\1\66\1\0\7\66\1\0\1\100\2\0"+
    "\1\70\4\0\5\66\1\123\1\124\4\66\1\0\1\66"+
    "\1\0\5\66\6\0\2\70\1\71\1\0\1\72\1\0"+
    "\1\73\30\31\1\125\43\31\24\0\1\100\6\0\1\126"+
    "\45\0\1\6\1\62\1\0\1\62\1\0\1\127\1\0"+
    "\7\6\11\0\1\6\1\130\1\127\2\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\4\6\1\131\2\6\11\0\5\6\1\132"+
    "\1\133\4\6\1\0\1\6\1\0\1\6\1\134\3\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\7\0\1\6"+
    "\1\62\1\0\1\62\1\0\1\6\1\0\1\135\2\6"+
    "\1\136\3\6\11\0\5\6\1\137\1\140\4\6\1\0"+
    "\1\6\1\0\3\6\1\141\1\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\17\0\1\142\22\0\1\143\40\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\1\6"+
    "\1\144\5\6\11\0\4\6\1\145\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\1\146\6\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\3\6\1\147\3\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\1\150\3\6\1\151\2\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\3\6\1\152\3\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\14\0\1\153\6\0"+
    "\1\154\14\0\1\153\42\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\155\1\0\5\6\1\156\1\6\11\0\2\6"+
    "\1\155\2\6\1\0\5\6\1\0\1\6\1\0\5\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\7\0\1\6"+
    "\1\62\1\0\1\62\1\0\1\6\1\0\1\6\1\157"+
    "\5\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\7\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\1\160"+
    "\6\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\26\0"+
    "\1\100\37\0\1\161\14\0\1\162\1\163\1\0\1\163"+
    "\1\0\1\162\1\0\7\162\4\0\1\70\4\0\5\162"+
    "\1\123\1\164\4\162\1\0\1\162\1\0\5\162\6\0"+
    "\1\165\1\70\1\166\1\0\1\167\1\0\1\73\5\0"+
    "\1\66\1\170\1\0\1\170\1\0\1\66\1\0\7\66"+
    "\4\0\1\70\4\0\5\66\1\123\1\124\4\66\1\0"+
    "\1\66\1\0\5\66\6\0\2\70\1\71\1\0\1\72"+
    "\1\0\1\73\70\0\1\55\1\0\1\55\73\0\1\55"+
    "\1\0\3\171\1\172\67\171\1\173\5\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\7\62\11\0\5\62\1\0"+
    "\5\62\1\0\1\62\1\0\5\62\22\0\2\162\1\0"+
    "\1\162\1\0\1\162\1\0\7\162\11\0\5\162\1\0"+
    "\5\162\1\0\1\162\1\0\5\162\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\72\0\1\63\1\0\1\63\73\0"+
    "\1\63\6\0\1\66\4\0\1\66\1\0\7\66\11\0"+
    "\5\66\1\0\5\66\1\0\1\66\1\0\5\66\23\0"+
    "\1\174\1\0\1\174\1\0\1\175\66\0\1\66\1\122"+
    "\1\0\1\122\1\0\1\66\1\0\7\66\4\0\1\70"+
    "\4\0\5\66\1\0\5\66\1\0\1\66\1\0\5\66"+
    "\6\0\2\70\1\71\1\0\1\72\1\0\1\73\70\0"+
    "\1\70\1\0\1\70\73\0\1\70\1\0\73\73\1\70"+
    "\6\0\1\75\1\0\1\75\1\0\1\175\66\0\1\6"+
    "\1\62\1\0\1\62\1\0\1\6\1\0\2\6\1\176"+
    "\4\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\7\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\7\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\177\1\200"+
    "\4\6\6\0\1\63\1\0\1\64\1\0\1\65\7\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\2\6"+
    "\1\107\4\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\5\6\6\0\1\63\1\0\1\64\1\0\1\65"+
    "\7\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\5\6\1\107\1\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\45\0\1\201\35\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\6\1\0\7\6\11\0\5\6\1\0\1\6"+
    "\1\202\3\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\7\6\11\0\3\6\1\203"+
    "\1\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\60\0\1\100\22\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\1\204"+
    "\6\6\11\0\5\6\1\0\3\6\1\205\1\206\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\7\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\3\6\1\207\1\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\7\6\11\0\5\6\1\0\3\6\1\210"+
    "\1\6\1\0\1\6\1\0\5\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\7\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\211\1\0\7\6\11\0\2\6\1\211\2\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\4\6\1\107\2\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\26\0\1\53\47\0"+
    "\27\121\1\212\1\213\1\214\42\121\5\0\1\66\1\122"+
    "\1\0\1\122\1\215\1\66\1\0\7\66\4\0\1\70"+
    "\4\0\5\66\1\0\5\66\1\0\1\66\1\0\5\66"+
    "\6\0\2\70\1\71\1\0\1\72\1\0\1\73\16\0"+
    "\1\216\62\0\1\66\4\0\1\66\1\0\2\66\1\217"+
    "\4\66\11\0\5\66\1\0\5\66\1\0\1\66\1\0"+
    "\5\66\15\0\2\126\2\0\3\126\1\0\64\126\5\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\7\6"+
    "\11\0\5\6\1\0\2\6\1\220\2\6\1\0\1\6"+
    "\1\0\5\6\6\0\1\63\1\0\1\64\1\0\1\65"+
    "\7\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\5\6\1\210\1\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\7\6\11\0\5\6\1\221\1\222\4\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\23\0\1\223\57\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\6\1\0\5\6\1\224\1\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\7\6\11\0\5\6\1\225"+
    "\1\226\4\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\7\6\11\0\5\6\1\0"+
    "\1\6\1\227\3\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\4\6\1\230\2\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\5\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\45\0\1\231"+
    "\35\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\7\6\11\0\5\6\1\0\1\6\1\210\3\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\1\6\1\232\5\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\23\0\1\233\21\0\1\234\35\0\1\6"+
    "\1\62\1\0\1\62\1\0\1\6\1\0\5\6\1\235"+
    "\1\6\11\0\5\6\1\0\1\6\1\236\3\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\7\6\11\0\1\237\4\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\5\6\1\240\1\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\7\6\11\0\5\6\1\0\4\6\1\241"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\3\6\1\242\3\6\11\0\5\6\1\0"+
    "\5\6\1\0\1\6\1\0\5\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\7\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\6\1\0\1\6\1\243\5\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\23\0\1\201\72\0\1\244"+
    "\60\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\5\6\1\202\1\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\4\6\1\245\2\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\5\6\1\246\1\6\11\0\5\6\1\0"+
    "\5\6\1\0\1\6\1\0\5\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\7\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\6\1\0\4\6\1\247\2\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\66\0\1\161\14\0\2\162"+
    "\1\0\1\162\1\0\1\162\1\0\7\162\11\0\5\162"+
    "\1\0\5\162\1\0\1\162\1\0\5\162\22\0\1\162"+
    "\1\163\1\0\1\163\1\215\1\162\1\0\7\162\4\0"+
    "\1\70\4\0\5\162\1\0\5\162\1\0\1\162\1\0"+
    "\5\162\6\0\2\70\1\71\1\0\1\72\1\0\1\73"+
    "\5\0\2\162\1\0\1\162\1\0\1\162\1\0\2\162"+
    "\1\250\4\162\11\0\5\162\1\0\5\162\1\0\1\162"+
    "\1\0\5\162\22\0\1\162\1\163\1\0\1\163\1\0"+
    "\1\162\1\0\7\162\4\0\1\70\4\0\5\162\1\0"+
    "\5\162\1\0\1\162\1\0\5\162\6\0\1\165\1\70"+
    "\1\166\1\0\1\167\1\0\1\73\70\0\1\165\1\0"+
    "\1\165\73\0\1\165\6\0\1\66\1\170\1\0\1\170"+
    "\1\215\1\66\1\0\7\66\4\0\1\70\4\0\5\66"+
    "\1\0\5\66\1\0\1\66\1\0\5\66\6\0\2\70"+
    "\1\71\1\0\1\72\1\0\1\73\73\251\1\252\2\251"+
    "\1\171\70\251\1\252\5\0\1\66\1\253\1\0\1\253"+
    "\1\0\1\254\1\0\7\66\4\0\1\70\4\0\5\66"+
    "\1\0\5\66\1\0\1\66\1\0\5\66\6\0\2\70"+
    "\1\71\1\0\1\72\1\0\1\73\1\0\1\255\4\0"+
    "\1\256\1\0\1\256\2\0\1\255\50\0\1\255\21\0"+
    "\1\257\23\0\1\257\42\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\260\1\0\7\6\11\0\2\6\1\260\2\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\1\6\1\147\5\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\2\6\1\261\4\6"+
    "\11\0\5\6\1\0\1\6\1\202\3\6\1\0\1\6"+
    "\1\0\5\6\6\0\1\63\1\0\1\64\1\0\1\65"+
    "\7\0\1\6\1\62\1\0\1\62\1\0\1\262\1\0"+
    "\7\6\11\0\2\6\1\262\2\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\3\6\1\263\3\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\264\1\0\7\6\11\0\2\6\1\264\2\6\1\0"+
    "\5\6\1\0\1\6\1\0\5\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\7\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\202\1\0\7\6\11\0\2\6\1\202\2\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\1\6\1\265\5\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\2\0\27\214\1\212"+
    "\1\0\1\266\42\214\27\213\1\0\1\213\1\0\42\213"+
    "\27\214\1\212\1\0\43\214\6\0\1\267\1\0\1\267"+
    "\75\0\1\270\23\0\1\270\42\0\1\66\4\0\1\271"+
    "\1\0\7\66\11\0\2\66\1\271\2\66\1\0\5\66"+
    "\1\0\1\66\1\0\5\66\22\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\7\6\11\0\5\6\1\272"+
    "\1\273\4\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\23\0\1\274\57\0\1\6"+
    "\1\62\1\0\1\62\1\0\1\6\1\0\5\6\1\275"+
    "\1\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\55\0"+
    "\1\201\25\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\7\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\1\6\1\202\3\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\45\0\1\276\35\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\7\6\11\0\5\6\1\0"+
    "\1\6\1\277\3\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\7\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\300\1\301\4\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\7\6\11\0\3\6"+
    "\1\302\1\6\1\0\5\6\1\0\1\6\1\0\5\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\14\0\1\201"+
    "\23\0\1\201\42\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\7\6\11\0\5\6\1\0\4\6\1\303"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\43\0\2\304\36\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\7\6\11\0\5\6\1\304"+
    "\1\305\4\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\104\1\0\7\6\11\0\2\6\1\104"+
    "\2\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\3\6\1\202\3\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\5\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\7\0\1\6"+
    "\1\62\1\0\1\62\1\0\1\6\1\0\7\6\11\0"+
    "\5\6\1\0\5\6\1\306\1\307\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\7\6\11\0\5\6"+
    "\1\0\2\6\1\310\1\6\1\311\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\7\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\7\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\312\1\313"+
    "\4\6\6\0\1\63\1\0\1\64\1\0\1\65\43\0"+
    "\2\314\36\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\7\6\11\0\5\6\1\314\1\315\4\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\7\6\11\0\5\6\1\316\1\317\4\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\2\162\1\0\1\162\1\0\1\320\1\0"+
    "\7\162\11\0\2\162\1\320\2\162\1\0\5\162\1\0"+
    "\1\162\1\0\5\162\15\0\73\251\1\173\5\0\1\66"+
    "\1\253\1\0\1\253\1\215\1\254\1\0\7\66\4\0"+
    "\1\70\4\0\5\66\1\0\5\66\1\0\1\66\1\0"+
    "\5\66\6\0\2\70\1\71\1\0\1\72\1\0\1\73"+
    "\1\0\1\321\3\0\1\66\1\322\1\0\1\322\1\0"+
    "\1\66\1\321\7\66\11\0\5\66\1\0\5\66\1\0"+
    "\1\66\1\0\5\66\5\0\1\321\15\0\1\256\1\0"+
    "\1\256\70\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\1\155\6\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\4\6\1\323\2\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\66\1\324\1\0\1\324\1\0"+
    "\1\325\1\0\7\66\4\0\1\70\4\0\5\66\1\0"+
    "\5\66\1\0\1\66\1\0\5\66\6\0\2\70\1\71"+
    "\1\0\1\72\1\0\1\73\15\0\1\326\63\0\1\66"+
    "\4\0\1\66\1\0\1\66\1\327\5\66\11\0\5\66"+
    "\1\0\5\66\1\0\1\66\1\0\5\66\32\0\1\330"+
    "\63\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\1\6\1\331\5\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\14\0\1\332\23\0\1\332\42\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\333\1\0\7\6\11\0\2\6"+
    "\1\333\2\6\1\0\5\6\1\0\1\6\1\0\5\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\14\0\1\334"+
    "\23\0\1\334\42\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\335\1\0\7\6\11\0\2\6\1\335\2\6\1\0"+
    "\5\6\1\0\1\6\1\0\5\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\14\0\1\336\23\0\1\336\42\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\337\1\0\7\6"+
    "\11\0\2\6\1\337\2\6\1\0\5\6\1\0\1\6"+
    "\1\0\5\6\6\0\1\63\1\0\1\64\1\0\1\65"+
    "\7\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\1\263\6\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\5\6\6\0\1\63\1\0\1\64\1\0\1\65"+
    "\7\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\5\6\1\340\1\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\17\0\1\231\63\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\6\1\0\1\6\1\210\5\6\11\0\5\6"+
    "\1\0\5\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\14\0\1\341\23\0\1\341"+
    "\42\0\1\6\1\62\1\0\1\62\1\0\1\323\1\0"+
    "\7\6\11\0\2\6\1\323\2\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\4\6\1\342\2\6\11\0\5\6\1\0\5\6"+
    "\1\0\1\6\1\0\5\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\343\1\0\7\6\11\0\2\6\1\343\2\6\1\0"+
    "\5\6\1\0\1\6\1\0\5\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\23\0\1\344\57\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\5\6\1\345\1\6"+
    "\11\0\5\6\1\0\5\6\1\0\1\6\1\0\5\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\17\0\1\346"+
    "\63\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\1\6\1\347\5\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\45\0\1\350\35\0\1\6\1\62\1\0\1\62"+
    "\1\0\1\6\1\0\7\6\11\0\5\6\1\0\1\6"+
    "\1\351\3\6\1\0\1\6\1\0\5\6\6\0\1\63"+
    "\1\0\1\64\1\0\1\65\7\0\2\162\1\0\1\162"+
    "\1\0\1\162\1\0\1\162\1\352\5\162\11\0\5\162"+
    "\1\0\5\162\1\0\1\162\1\0\5\162\23\0\1\353"+
    "\1\0\1\353\70\0\1\66\1\354\1\0\1\354\1\355"+
    "\1\356\1\0\7\66\4\0\1\70\4\0\5\66\1\0"+
    "\5\66\1\0\1\66\1\0\5\66\6\0\2\70\1\71"+
    "\1\0\1\72\1\0\1\73\5\0\1\6\1\62\1\0"+
    "\1\62\1\0\1\6\1\0\2\6\1\202\4\6\11\0"+
    "\5\6\1\0\5\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\7\0\1\66\1\324"+
    "\1\0\1\324\1\215\1\325\1\0\7\66\4\0\1\70"+
    "\4\0\5\66\1\0\5\66\1\0\1\66\1\0\5\66"+
    "\6\0\2\70\1\71\1\0\1\72\1\0\1\73\1\0"+
    "\1\357\3\0\1\66\1\360\1\0\1\360\1\0\1\66"+
    "\1\357\7\66\11\0\5\66\1\0\5\66\1\0\1\66"+
    "\1\0\5\66\5\0\1\357\47\0\1\361\40\0\1\66"+
    "\4\0\1\66\1\0\7\66\11\0\4\66\1\362\1\0"+
    "\5\66\1\0\1\66\1\0\5\66\22\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\6\1\0\7\6\11\0\5\6"+
    "\1\363\1\364\4\6\1\0\1\6\1\0\5\6\6\0"+
    "\1\63\1\0\1\64\1\0\1\65\20\0\1\201\62\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\1\365"+
    "\6\6\11\0\5\6\1\0\5\6\1\0\1\6\1\0"+
    "\5\6\6\0\1\63\1\0\1\64\1\0\1\65\7\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\2\6"+
    "\1\366\4\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\5\6\6\0\1\63\1\0\1\64\1\0\1\65"+
    "\46\0\1\367\34\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\7\6\11\0\5\6\1\0\2\6\1\370"+
    "\2\6\1\0\1\6\1\0\5\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\7\0\2\162\1\0\1\162\1\0"+
    "\1\162\1\0\7\162\11\0\4\162\1\371\1\0\5\162"+
    "\1\0\1\162\1\0\5\162\22\0\1\66\1\354\1\0"+
    "\1\354\1\0\1\356\1\0\7\66\4\0\1\70\4\0"+
    "\5\66\1\0\5\66\1\0\1\66\1\0\5\66\6\0"+
    "\2\70\1\71\1\0\1\72\1\0\1\73\5\0\1\66"+
    "\1\354\1\0\1\354\1\215\1\356\1\0\7\66\4\0"+
    "\1\70\4\0\5\66\1\0\5\66\1\0\1\66\1\0"+
    "\5\66\6\0\2\70\1\71\1\0\1\72\1\0\1\73"+
    "\32\0\1\372\42\0\1\373\3\0\1\66\1\374\1\0"+
    "\1\374\1\0\1\66\1\373\7\66\11\0\5\66\1\0"+
    "\5\66\1\0\1\66\1\0\5\66\5\0\1\373\15\0"+
    "\1\360\1\0\1\360\70\0\1\66\1\375\1\0\1\375"+
    "\1\0\1\376\1\0\7\66\4\0\1\70\4\0\5\66"+
    "\1\0\5\66\1\0\1\66\1\0\5\66\6\0\2\70"+
    "\1\71\1\0\1\72\1\0\1\73\41\0\2\377\36\0"+
    "\1\66\4\0\1\66\1\0\7\66\11\0\5\66\1\377"+
    "\1\u0100\4\66\1\0\1\66\1\0\5\66\34\0\1\u0101"+
    "\61\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\3\6\1\u0102\3\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\1\6\1\62\1\0\1\62\1\0\1\6"+
    "\1\0\7\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\u0103\2\6\6\0\1\63\1\0\1\64"+
    "\1\0\1\65\7\0\1\6\1\62\1\0\1\62\1\0"+
    "\1\6\1\0\7\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\3\6\1\u0104\1\6\6\0\1\63\1\0"+
    "\1\64\1\0\1\65\7\0\2\162\1\0\1\162\1\0"+
    "\1\162\1\0\7\162\11\0\5\162\1\377\1\u0105\4\162"+
    "\1\0\1\162\1\0\5\162\33\0\1\u0106\63\0\1\u0107"+
    "\1\0\1\u0107\70\0\1\66\1\u0108\1\0\1\u0108\1\355"+
    "\1\66\1\0\7\66\4\0\1\70\4\0\5\66\1\0"+
    "\5\66\1\0\1\66\1\0\5\66\6\0\2\70\1\71"+
    "\1\0\1\72\1\0\1\73\5\0\1\66\1\375\1\0"+
    "\1\375\1\215\1\376\1\0\7\66\4\0\1\70\4\0"+
    "\5\66\1\0\5\66\1\0\1\66\1\0\5\66\6\0"+
    "\2\70\1\71\1\0\1\72\1\0\1\73\1\0\1\u0109"+
    "\3\0\1\66\1\70\1\0\1\70\1\0\1\66\1\u0109"+
    "\7\66\11\0\5\66\1\0\5\66\1\0\1\66\1\0"+
    "\5\66\5\0\1\u0109\30\0\1\u010a\57\0\1\66\4\0"+
    "\1\66\1\0\5\66\1\u010b\1\66\11\0\5\66\1\0"+
    "\5\66\1\0\1\66\1\0\5\66\32\0\1\u010c\63\0"+
    "\1\6\1\62\1\0\1\62\1\0\1\6\1\0\1\6"+
    "\1\u010d\5\6\11\0\5\6\1\0\5\6\1\0\1\6"+
    "\1\0\5\6\6\0\1\63\1\0\1\64\1\0\1\65"+
    "\7\0\1\6\1\62\1\0\1\62\1\0\1\6\1\0"+
    "\4\6\1\u010e\2\6\11\0\5\6\1\0\5\6\1\0"+
    "\1\6\1\0\5\6\6\0\1\63\1\0\1\64\1\0"+
    "\1\65\7\0\2\162\1\0\1\162\1\0\1\162\1\0"+
    "\5\162\1\u010f\1\162\11\0\5\162\1\0\5\162\1\0"+
    "\1\162\1\0\5\162\56\0\2\u0110\36\0\1\66\1\u0108"+
    "\1\0\1\u0108\1\0\1\66\1\0\7\66\4\0\1\70"+
    "\4\0\5\66\1\0\5\66\1\0\1\66\1\0\5\66"+
    "\6\0\2\70\1\71\1\0\1\72\1\0\1\73\5\0"+
    "\1\66\1\u0108\1\0\1\u0108\1\215\1\66\1\0\7\66"+
    "\4\0\1\70\4\0\5\66\1\0\5\66\1\0\1\66"+
    "\1\0\5\66\6\0\2\70\1\71\1\0\1\72\1\0"+
    "\1\73\6\0\1\70\1\0\1\70\124\0\2\u0111\36\0"+
    "\1\66\4\0\1\66\1\0\7\66\11\0\5\66\1\u0111"+
    "\5\66\1\0\1\66\1\0\5\66\22\0\1\6\1\62"+
    "\1\0\1\62\1\0\1\u0112\1\0\7\6\11\0\2\6"+
    "\1\u0112\2\6\1\0\5\6\1\0\1\6\1\0\5\6"+
    "\6\0\1\63\1\0\1\64\1\0\1\65\7\0\2\162"+
    "\1\0\1\162\1\0\1\162\1\0\7\162\11\0\5\162"+
    "\1\u0111\5\162\1\0\1\162\1\0\5\162\61\0\1\u0113"+
    "\67\0\1\u0114\74\0\2\u0115\43\0\1\u0116\23\0\1\u0116"+
    "\56\0\1\u0117\72\0\1\u0118\103\0\1\u0119\126\0\1\u011a"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\17\1\1\11\3\1\1\11"+
    "\17\1\4\11\10\1\2\0\2\1\5\0\3\1\1\11"+
    "\2\1\1\0\2\1\1\0\11\1\1\11\1\1\2\0"+
    "\1\1\1\11\4\1\1\0\4\1\1\0\3\1\1\11"+
    "\7\1\2\0\11\1\2\0\5\1\1\0\1\1\1\0"+
    "\1\1\1\11\10\1\1\0\1\1\3\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\0\7\1\1\0\10\1\1\0\1\1\1\11\7\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\4\1\1\0\1\1\3\0\1\1\1\0\3\1"+
    "\1\11\2\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\2\1\2\0\1\1\1\11\3\1"+
    "\2\0\1\1\5\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* Cï¿½digo personalizado */
 
 // Se agregï¿½ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }

private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
}

private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
}

private Symbol symbol(String value, int type, int line) {
    return new Symbol(type, yyline, yycolumn, (Object)value);
}
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABC(java.io.Reader in) {
   /* Cï¿½digo que se ejecutarï¿½ en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* Cï¿½digo a ejecutar al finalizar el anï¿½lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Espacios y tabuladores
            }
          case 51: break;
          case 2: 
            { Symbol t = new Symbol(sym.ERROR_INVALID_CHARACTER, yyline, yycolumn, (Object)yytext());
    System.err.println("Lexical error in line " + yyline + ": " + "Caracter invalido ( " + (Object)yytext() + " )" );
    this._existenTokens = true;
    return t;
            }
          case 52: break;
          case 3: 
            { /*Token t = new Token("Enter", Types.IDENTIFIER);
 this._existenTokens = true;
 return t;*/
            }
          case 53: break;
          case 4: 
            { Symbol t = new Symbol(sym.IDENTIFIER, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.IDENTIFIER, yyline);
    if (yytext().length()>127){
        t = new Symbol(sym.ERROR_INVALID_LENGTH, yyline, yycolumn, (Object)yytext());
        System.err.println("Lexical error in line " + yyline + ": " + "Longitud invalida ( " + (Object)yytext() + " )" );
    }
     this._existenTokens = true;
     return t;
            }
          case 54: break;
          case 5: 
            { Symbol t = new Symbol(sym.INTEGER_NUMERIC_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.INTEGER_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 55: break;
          case 6: 
            { Symbol t = new Symbol(sym.OPERATOR, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.OPERATOR, yyline);
    this._existenTokens = true;
    return t;
            }
          case 56: break;
          case 7: 
            { Symbol t = new Symbol(sym.MINUSOP, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ARITHMETICOP, yyline);
    this._existenTokens = true;
    return t;
            }
          case 57: break;
          case 8: 
            { Symbol t = new Symbol(sym.BOOLEAN_OPERATOR, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 58: break;
          case 9: 
            { Symbol t = new Symbol(sym.EQUAL, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 59: break;
          case 10: 
            { Symbol t = new Symbol(sym.OPEN_PARENTHESIS, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.OPEN_PARENTHESIS, yyline);
    this._existenTokens = true;
    return t;
            }
          case 60: break;
          case 11: 
            { Symbol t = new Symbol(sym.ARITHMETICOP, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ARITHMETICOP, yyline);
    this._existenTokens = true;
    return t;
            }
          case 61: break;
          case 12: 
            { Symbol t = new Symbol(sym.CLOSE_PARENTHESIS, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.CLOSE_PARENTHESIS, yyline);
    this._existenTokens = true;
    return t;
            }
          case 62: break;
          case 13: 
            { Symbol t = new Symbol(sym.ERROR_COMMENT, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.ERROR_COMMENT, yyline);
    System.err.println("Lexical error in line " + yyline + ": " + "Error de comentario. Revise si faltan caracteres de cierre");
    this._existenTokens = true;
    return t;
    //return symbol(sym.ERROR_COMMENT);
            }
          case 63: break;
          case 14: 
            { Symbol t = new Symbol(sym.COMMA, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 64: break;
          case 15: 
            { Symbol t = new Symbol(sym.SEMI, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 65: break;
          case 16: 
            { Symbol t = new Symbol(sym.COLON, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 66: break;
          case 17: 
            { //Token t = new Token(yytext(), Types.ERROR_INVALID_CHARACTER, yyline);
    Symbol t = new Symbol(sym.ERROR_INVALID_CHARACTER, yyline, yycolumn, (Object)yytext());
    System.err.println("Lexical error in line " + yyline + ": " + "Caracter invalido ( " + (Object)yytext() + " )" );
    this._existenTokens = true;
    //return new Symbol(sym.ERROR_INVALID_CHARACTER);
    return t;
            }
          case 67: break;
          case 18: 
            { Symbol t = new Symbol(sym.ERROR_STRING, yyline, yycolumn, (Object)yytext());
    System.err.println("Lexical error in line " + yyline + ": " + "Error de string ( " + (Object)yytext() + " )" );
    this._existenTokens = true;
    return t;
            }
          case 68: break;
          case 19: 
            { Symbol t = new Symbol(sym.ERROR_IDENTIFIER, yyline, yycolumn, (Object)yytext());
    System.err.println("Lexical error in line " + yyline + ": " + "Identificador erroneo ( " + (Object)yytext() + " )");
    this._existenTokens = true;
    //return symbol(sym.ERROR_IDENTIFIER);
    return t;
            }
          case 69: break;
          case 20: 
            { Symbol t = new Symbol(sym.ERROR_FLOATING_POINT, yyline, yycolumn, (Object)yytext());
    System.err.println("Lexical error in line " + yyline + ": " + "Error en numero racional ( " + (Object)yytext() + " )" );
    this._existenTokens = true;
    return t;
            }
          case 70: break;
          case 21: 
            { Symbol t = new Symbol(sym.DO, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 71: break;
          case 22: 
            { Symbol t = new Symbol(sym.OF, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 72: break;
          case 23: 
            { Symbol t = new Symbol(sym.TO, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 73: break;
          case 24: 
            { // Comentario de bloque 1
            }
          case 74: break;
          case 25: 
            { Symbol t = new Symbol(sym.RESERVED, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.RESERVED, yyline);
    this._existenTokens = true;
    return t;
            }
          case 75: break;
          case 26: 
            { Symbol t = new Symbol(sym.IF, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 76: break;
          case 27: 
            { Symbol t = new Symbol(sym.NUMERIC_CHAR_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.NUMERIC_CHAR_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 77: break;
          case 28: 
            { Symbol t = new Symbol(sym.STRING_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.STRING_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 78: break;
          case 29: 
            { Symbol t = new Symbol(sym.IDENTIFIER, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.FLOATING_POINT_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 79: break;
          case 30: 
            { Symbol t = new Symbol(sym.END, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 80: break;
          case 31: 
            { Symbol t = new Symbol(sym.FOR, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 81: break;
          case 32: 
            { Symbol t = new Symbol(sym.INT, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 82: break;
          case 33: 
            { Symbol t = new Symbol(sym.VAR, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 83: break;
          case 34: 
            { Symbol t = new Symbol(sym.CHAR_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.CHAR_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 84: break;
          case 35: 
            { Symbol t = new Symbol(sym.ELSE, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 85: break;
          case 36: 
            { Symbol t = new Symbol(sym.READ, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 86: break;
          case 37: 
            { Symbol t = new Symbol(sym.TRUE, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 87: break;
          case 38: 
            { Symbol t = new Symbol(sym.THEN, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 88: break;
          case 39: 
            { Symbol t = new Symbol(sym.SCIENTIFIC_NOTATION_NUMERIC_LITERAL, yyline, yycolumn, (Object)yytext());
    //Token t = new Token(yytext(), Types.SCIENTIFIC_NOTATION_NUMERIC_LITERAL, yyline);
    this._existenTokens = true;
    return t;
            }
          case 89: break;
          case 40: 
            { Symbol t = new Symbol(sym.BEGIN, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 90: break;
          case 41: 
            { Symbol t = new Symbol(sym.WRITE, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 91: break;
          case 42: 
            { Symbol t = new Symbol(sym.WHILE, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 92: break;
          case 43: 
            { Symbol t = new Symbol(sym.FALSE, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 93: break;
          case 44: 
            { Symbol t = new Symbol(sym.CONST, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 94: break;
          case 45: 
            { Symbol t = new Symbol(sym.UNTIL, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 95: break;
          case 46: 
            { Symbol t = new Symbol(sym.STRING, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 96: break;
          case 47: 
            { Symbol t = new Symbol(sym.PROGRAM, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 97: break;
          case 48: 
            { Symbol t = new Symbol(sym.FUNCTION, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 98: break;
          case 49: 
            { Symbol t = new Symbol(sym.PROCEDURE, yyline, yycolumn, (Object)yytext());
    this._existenTokens = true;
    return t;
            }
          case 99: break;
          case 50: 
            { Symbol t = new Symbol(sym.ERROR_FLOATING_POINT, yyline, yycolumn, (Object)yytext());
    System.err.println("Lexical error in line " + yyline + ": " + "Notacion cientifica incorrecta ( " + (Object)yytext() + " )" );
    this._existenTokens = true;
    return t;
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
