
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import semantic.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\012\000\002\002\004\000\002\002" +
    "\012\000\002\002\011\000\002\002\011\000\002\002\010" +
    "\000\002\002\007\000\002\002\003\000\002\003\004\000" +
    "\002\046\002\000\002\004\010\000\002\004\006\000\002" +
    "\004\002\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\005\004\000\002\006\002\000\002\047\002\000" +
    "\002\050\002\000\002\006\012\000\002\051\002\000\002" +
    "\007\006\000\002\007\002\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\052\002\000\002\011\006" +
    "\000\002\053\002\000\002\011\006\000\002\011\005\000" +
    "\002\011\005\000\002\011\002\000\002\054\002\000\002" +
    "\055\002\000\002\012\015\000\002\056\002\000\002\057" +
    "\002\000\002\060\002\000\002\012\021\000\002\061\002" +
    "\000\002\062\002\000\002\035\013\000\002\063\002\000" +
    "\002\064\002\000\002\065\002\000\002\035\017\000\002" +
    "\066\002\000\002\013\007\000\002\013\006\000\002\013" +
    "\002\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\045\004\000" +
    "\002\044\002\000\002\067\002\000\002\070\002\000\002" +
    "\044\012\000\002\041\004\000\002\071\002\000\002\042" +
    "\010\000\002\042\006\000\002\042\002\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\002" +
    "\000\002\072\002\000\002\073\002\000\002\017\014\000" +
    "\002\074\002\000\002\020\005\000\002\020\006\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\075\002\000\002\033\005\000\002\076\002" +
    "\000\002\033\005\000\002\033\002\000\002\077\002\000" +
    "\002\021\005\000\002\021\002\000\002\021\005\000\002" +
    "\100\002\000\002\101\002\000\002\102\002\000\002\022" +
    "\015\000\002\023\015\000\002\023\012\000\002\023\005" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\024\004\000\002\031\003\000\002\031\004\000\002\031" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\004\000\002\031\003\000" +
    "\002\103\002\000\002\032\006\000\002\104\002\000\002" +
    "\032\006\000\002\032\005\000\002\105\002\000\002\032" +
    "\006\000\002\032\002\000\002\106\002\000\002\107\002" +
    "\000\002\026\012\000\002\026\006\000\002\026\007\000" +
    "\002\026\006\000\002\026\006\000\002\014\002\000\002" +
    "\110\002\000\002\014\006\000\002\111\002\000\002\112" +
    "\002\000\002\113\002\000\002\025\012\000\002\027\007" +
    "\000\002\027\006\000\002\027\007\000\002\114\002\000" +
    "\002\030\011\000\002\030\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\006\003\005\023\006\001\002\000\004\002" +
    "\u014a\001\002\000\004\002\ufffa\001\002\000\004\004\007" +
    "\001\002\000\014\025\014\031\011\037\017\044\012\055" +
    "\010\001\002\000\014\004\u0142\025\uffed\031\uffed\037\uffed" +
    "\044\uffed\001\002\000\014\004\u0132\025\ufff5\037\ufff5\044" +
    "\ufff5\055\ufff5\001\002\000\006\003\u0119\004\uffe1\001\002" +
    "\000\012\025\uffdd\037\017\044\012\055\010\001\002\000" +
    "\020\004\043\034\uffae\036\056\040\045\045\036\056\041" +
    "\057\046\001\002\000\012\025\uffdd\031\011\037\017\044" +
    "\012\001\002\000\004\025\u0102\001\002\000\006\003\020" +
    "\004\uffe3\001\002\000\004\034\u0101\001\002\000\004\004" +
    "\023\001\002\000\010\025\uffdd\037\017\044\012\001\002" +
    "\000\004\017\024\001\002\000\012\020\uffdc\030\uffd9\041" +
    "\uffd9\050\uffd9\001\002\000\010\030\033\041\034\050\031" +
    "\001\002\000\004\020\027\001\002\000\004\065\030\001" +
    "\002\000\010\030\033\041\034\050\031\001\002\000\026" +
    "\004\uffe4\025\uffe4\031\uffe4\036\uffe4\040\uffe4\045\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\062\uffe4\001\002\000\024\004\uffdb" +
    "\025\uffdb\031\uffdb\036\uffdb\040\uffdb\045\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\001\002\000\026\004\uffe5\025\uffe5\031\uffe5" +
    "\036\uffe5\040\uffe5\045\uffe5\055\uffe5\056\uffe5\057\uffe5\062" +
    "\uffe5\001\002\000\026\004\uffe6\025\uffe6\031\uffe6\036\uffe6" +
    "\040\uffe6\045\uffe6\055\uffe6\056\uffe6\057\uffe6\062\uffe6\001" +
    "\002\000\024\004\043\025\uffae\031\051\036\056\040\045" +
    "\045\036\055\060\056\041\057\046\001\002\000\004\017" +
    "\343\001\002\000\022\004\043\025\uffae\031\051\036\056" +
    "\040\045\045\036\056\041\057\046\001\002\000\024\004" +
    "\043\025\uffae\033\uffae\034\uffae\036\056\040\045\045\036" +
    "\056\041\057\046\001\002\000\004\017\uff9a\001\002\000" +
    "\024\004\043\025\uffae\033\uffae\034\uffae\036\056\040\045" +
    "\045\036\056\041\057\046\001\002\000\010\003\127\017" +
    "\130\065\uff71\001\002\000\022\004\043\025\uffae\036\056" +
    "\040\045\045\036\055\060\056\041\057\046\001\002\000" +
    "\004\017\247\001\002\000\004\017\236\001\002\000\024" +
    "\004\043\025\uffae\033\uffae\034\uffae\036\056\040\045\045" +
    "\036\056\041\057\046\001\002\000\024\004\043\025\uffae" +
    "\033\uffae\034\uffae\036\056\040\045\045\036\056\041\057" +
    "\046\001\002\000\022\004\216\025\uffbc\036\uffbc\040\uffbc" +
    "\045\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000\024\004" +
    "\043\025\uffae\033\uffae\034\uffae\036\056\040\045\045\036" +
    "\056\041\057\046\001\002\000\024\004\043\025\uffae\033" +
    "\uffae\034\uffae\036\056\040\045\045\036\056\041\057\046" +
    "\001\002\000\004\025\uffc6\001\002\000\024\004\043\025" +
    "\uffae\033\uffae\034\uffae\036\056\040\045\045\036\056\041" +
    "\057\046\001\002\000\006\003\101\004\102\001\002\000" +
    "\004\025\076\001\002\000\022\004\061\025\uffc4\031\uffc4" +
    "\036\uffc4\040\uffc4\045\uffc4\056\uffc4\057\uffc4\001\002\000" +
    "\006\063\uffc3\065\uffc3\001\002\000\022\004\uffc5\025\uffc5" +
    "\031\uffc5\036\uffc5\040\uffc5\045\uffc5\056\uffc5\057\uffc5\001" +
    "\002\000\006\063\064\065\uffe7\001\002\000\004\004\073" +
    "\001\002\000\004\065\066\001\002\000\010\030\033\041" +
    "\034\050\031\001\002\000\004\062\070\001\002\000\022" +
    "\004\uffc2\025\uffc2\031\uffc2\036\uffc2\040\uffc2\045\uffc2\056" +
    "\uffc2\057\uffc2\001\002\000\022\004\061\025\uffc4\031\uffc4" +
    "\036\uffc4\040\uffc4\045\uffc4\056\uffc4\057\uffc4\001\002\000" +
    "\022\004\uffc1\025\uffc1\031\uffc1\036\uffc1\040\uffc1\045\uffc1" +
    "\056\uffc1\057\uffc1\001\002\000\006\063\uffe9\065\uffe9\001" +
    "\002\000\006\063\064\065\uffe7\001\002\000\004\065\uffe8" +
    "\001\002\000\020\004\043\034\uffae\036\056\040\045\045" +
    "\036\056\041\057\046\001\002\000\004\034\100\001\002" +
    "\000\010\025\uffda\037\uffda\044\uffda\001\002\000\006\034" +
    "\204\052\203\001\002\000\004\065\103\001\002\000\004" +
    "\060\104\001\002\000\032\004\121\007\117\011\107\012" +
    "\113\013\105\014\112\015\122\016\120\017\124\035\114" +
    "\053\110\064\106\001\002\000\024\005\uff91\007\uff91\020" +
    "\uff91\032\uff91\052\uff91\060\uff91\062\uff91\063\uff91\064\uff91" +
    "\001\002\000\032\004\121\007\117\011\107\012\113\013" +
    "\105\014\112\015\122\016\120\017\124\035\114\053\110" +
    "\064\106\001\002\000\024\005\uff93\007\uff93\020\uff93\032" +
    "\uff93\052\uff93\060\uff93\062\uff93\063\uff93\064\uff93\001\002" +
    "\000\024\005\uff89\007\uff89\020\uff89\032\uff89\052\uff89\060" +
    "\uff89\062\uff89\063\uff89\064\uff89\001\002\000\004\052\174" +
    "\001\002\000\024\005\uff90\007\uff90\020\uff90\032\uff90\052" +
    "\uff90\060\uff90\062\uff90\063\uff90\064\uff90\001\002\000\024" +
    "\005\uff92\007\uff92\020\uff92\032\uff92\052\uff92\060\uff92\062" +
    "\uff92\063\uff92\064\uff92\001\002\000\024\005\uff88\007\uff88" +
    "\020\uff88\032\uff88\052\uff88\060\uff88\062\uff88\063\uff88\064" +
    "\uff88\001\002\000\024\005\uff86\007\uff86\020\uff86\032\uff86" +
    "\052\uff86\060\uff86\062\uff86\063\uff86\064\uff86\001\002\000" +
    "\024\005\160\007\154\020\uff7c\032\uff7c\052\uff7c\060\156" +
    "\062\uff7c\063\uff7c\064\155\001\002\000\026\004\153\005" +
    "\uff84\007\uff84\020\uff84\032\uff84\052\uff84\060\uff84\062\uff84" +
    "\063\uff84\064\uff84\001\002\000\024\005\uff8f\007\uff8f\020" +
    "\uff8f\032\uff8f\052\uff8f\060\uff8f\062\uff8f\063\uff8f\064\uff8f" +
    "\001\002\000\030\003\127\005\uff8c\007\uff8c\017\130\020" +
    "\uff8c\032\uff8c\052\uff8c\060\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\001\002\000\024\005\uff8e\007\uff8e\020\uff8e\032\uff8e\052" +
    "\uff8e\060\uff8e\062\uff8e\063\uff8e\064\uff8e\001\002\000\024" +
    "\005\uff87\007\uff87\020\uff87\032\uff87\052\uff87\060\uff87\062" +
    "\uff87\063\uff87\064\uff87\001\002\000\032\004\121\007\117" +
    "\011\107\012\113\013\105\014\112\015\122\016\120\017" +
    "\124\035\114\053\110\064\106\001\002\000\004\020\126" +
    "\001\002\000\024\005\uff8a\007\uff8a\020\uff8a\032\uff8a\052" +
    "\uff8a\060\uff8a\062\uff8a\063\uff8a\064\uff8a\001\002\000\004" +
    "\020\151\001\002\000\036\003\132\004\uff7b\007\uff7b\011" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b" +
    "\020\133\035\uff7b\053\uff7b\064\uff7b\001\002\000\032\004" +
    "\121\007\117\011\107\012\113\013\105\014\112\015\122" +
    "\016\120\017\124\035\114\053\110\064\106\001\002\000" +
    "\006\020\136\062\135\001\002\000\004\062\134\001\002" +
    "\000\046\004\uff78\005\uff78\007\uff78\020\uff78\025\uff78\032" +
    "\uff78\033\uff78\034\uff78\036\uff78\040\uff78\045\uff78\052\uff78" +
    "\056\uff78\057\uff78\060\uff78\062\uff78\063\uff78\064\uff78\001" +
    "\002\000\046\004\uff75\005\uff75\007\uff75\020\uff75\025\uff75" +
    "\032\uff75\033\uff75\034\uff75\036\uff75\040\uff75\045\uff75\052" +
    "\uff75\056\uff75\057\uff75\060\uff75\062\uff75\063\uff75\064\uff75" +
    "\001\002\000\004\062\137\001\002\000\046\004\uff77\005" +
    "\uff77\007\uff77\020\uff77\025\uff77\032\uff77\033\uff77\034\uff77" +
    "\036\uff77\040\uff77\045\uff77\052\uff77\056\uff77\057\uff77\060" +
    "\uff77\062\uff77\063\uff77\064\uff77\001\002\000\006\020\uff7a" +
    "\063\uff7a\001\002\000\006\020\uff74\063\142\001\002\000" +
    "\032\004\121\007\117\011\107\012\113\013\105\014\112" +
    "\015\122\016\120\017\124\035\114\053\110\064\106\001" +
    "\002\000\004\020\144\001\002\000\004\062\145\001\002" +
    "\000\046\004\uff79\005\uff79\007\uff79\020\uff79\025\uff79\032" +
    "\uff79\033\uff79\034\uff79\036\uff79\040\uff79\045\uff79\052\uff79" +
    "\056\uff79\057\uff79\060\uff79\062\uff79\063\uff79\064\uff79\001" +
    "\002\000\006\020\uff73\063\uff73\001\002\000\006\020\uff74" +
    "\063\142\001\002\000\004\020\uff72\001\002\000\004\062" +
    "\152\001\002\000\046\004\uff76\005\uff76\007\uff76\020\uff76" +
    "\025\uff76\032\uff76\033\uff76\034\uff76\036\uff76\040\uff76\045" +
    "\uff76\052\uff76\056\uff76\057\uff76\060\uff76\062\uff76\063\uff76" +
    "\064\uff76\001\002\000\024\005\uff8b\007\uff8b\020\uff8b\032" +
    "\uff8b\052\uff8b\060\uff8b\062\uff8b\063\uff8b\064\uff8b\001\002" +
    "\000\032\004\uff81\007\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\035\uff81\053\uff81\064\uff81" +
    "\001\002\000\032\004\uff7e\007\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\035\uff7e\053\uff7e" +
    "\064\uff7e\001\002\000\032\004\121\007\117\011\107\012" +
    "\113\013\105\014\112\015\122\016\120\017\124\035\114" +
    "\053\110\064\106\001\002\000\024\005\uff8d\007\uff8d\020" +
    "\uff8d\032\uff8d\052\uff8d\060\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\001\002\000\032\004\uff83\007\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\015\uff83\016\uff83\017\uff83\035\uff83\053\uff83" +
    "\064\uff83\001\002\000\032\004\121\007\117\011\107\012" +
    "\113\013\105\014\112\015\122\016\120\017\124\035\114" +
    "\053\110\064\106\001\002\000\024\005\160\007\154\020" +
    "\uff7c\032\uff7c\052\uff7c\060\156\062\uff7c\063\uff7c\064\155" +
    "\001\002\000\024\005\uff82\007\uff82\020\uff82\032\uff82\052" +
    "\uff82\060\uff82\062\uff82\063\uff82\064\uff82\001\002\000\024" +
    "\005\160\007\154\020\uff7c\032\uff7c\052\uff7c\060\156\062" +
    "\uff7c\063\uff7c\064\155\001\002\000\024\005\uff7f\007\uff7f" +
    "\020\uff7f\032\uff7f\052\uff7f\060\uff7f\062\uff7f\063\uff7f\064" +
    "\uff7f\001\002\000\032\004\121\007\117\011\107\012\113" +
    "\013\105\014\112\015\122\016\120\017\124\035\114\053" +
    "\110\064\106\001\002\000\024\005\160\007\154\020\uff7c" +
    "\032\uff7c\052\uff7c\060\156\062\uff7c\063\uff7c\064\155\001" +
    "\002\000\024\005\uff7d\007\uff7d\020\uff7d\032\uff7d\052\uff7d" +
    "\060\uff7d\062\uff7d\063\uff7d\064\uff7d\001\002\000\032\004" +
    "\121\007\117\011\107\012\113\013\105\014\112\015\122" +
    "\016\120\017\124\035\114\053\110\064\106\001\002\000" +
    "\024\005\160\007\154\020\uff7c\032\uff7c\052\uff7c\060\156" +
    "\062\uff7c\063\uff7c\064\155\001\002\000\024\005\uff80\007" +
    "\uff80\020\uff80\032\uff80\052\uff80\060\uff80\062\uff80\063\uff80" +
    "\064\uff80\001\002\000\032\004\121\007\117\011\107\012" +
    "\113\013\105\014\112\015\122\016\120\017\124\035\114" +
    "\053\110\064\106\001\002\000\004\032\176\001\002\000" +
    "\004\025\177\001\002\000\020\004\043\034\uffae\036\056" +
    "\040\045\045\036\056\041\057\046\001\002\000\004\034" +
    "\201\001\002\000\024\004\uff96\025\uff96\033\uff96\034\uff96" +
    "\036\uff96\040\uff96\045\uff96\056\uff96\057\uff96\001\002\000" +
    "\024\005\uff85\007\uff85\020\uff85\032\uff85\052\uff85\060\uff85" +
    "\062\uff85\063\uff85\064\uff85\001\002\000\032\004\121\007" +
    "\117\011\107\012\113\013\105\014\112\015\122\016\120" +
    "\017\124\035\114\053\110\064\106\001\002\000\024\004" +
    "\uff94\025\uff94\033\uff94\034\uff94\036\uff94\040\uff94\045\uff94" +
    "\056\uff94\057\uff94\001\002\000\004\032\206\001\002\000" +
    "\004\025\207\001\002\000\020\004\043\034\uffae\036\056" +
    "\040\045\045\036\056\041\057\046\001\002\000\004\034" +
    "\211\001\002\000\024\004\uff95\025\uff95\033\uff95\034\uff95" +
    "\036\uff95\040\uff95\045\uff95\056\uff95\057\uff95\001\002\000" +
    "\010\025\uffb1\033\uffb1\034\uffb1\001\002\000\010\025\uffaf" +
    "\033\uffaf\034\uffaf\001\002\000\010\025\uffb0\033\uffb0\034" +
    "\uffb0\001\002\000\022\004\uffc0\025\uffc0\036\uffc0\040\uffc0" +
    "\045\uffc0\055\uffc0\056\uffc0\057\uffc0\001\002\000\004\060" +
    "\217\001\002\000\020\003\221\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\001\002\000\016\011\223\012" +
    "\225\013\231\014\226\015\224\016\230\001\002\000\004" +
    "\062\222\001\002\000\022\004\uffbd\025\uffbd\036\uffbd\040" +
    "\uffbd\045\uffbd\055\uffbd\056\uffbd\057\uffbd\001\002\000\004" +
    "\062\uffbb\001\002\000\004\062\uffb6\001\002\000\004\062" +
    "\uffba\001\002\000\004\062\uffb8\001\002\000\004\062\232" +
    "\001\002\000\004\062\uffb7\001\002\000\004\062\uffb9\001" +
    "\002\000\022\004\216\025\uffbc\036\uffbc\040\uffbc\045\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\001\002\000\022\004\uffbe\025" +
    "\uffbe\036\uffbe\040\uffbe\045\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\001\002\000\010\025\uffb2\033\uffb2\034\uffb2\001\002\000" +
    "\010\025\uffb3\033\uffb3\034\uffb3\001\002\000\034\003\240" +
    "\004\121\007\117\011\107\012\113\013\105\014\112\015" +
    "\122\016\120\017\124\035\114\053\110\064\106\001\002" +
    "\000\006\020\uff6a\063\uff6a\001\002\000\004\020\241\001" +
    "\002\000\004\062\242\001\002\000\024\004\uff68\025\uff68" +
    "\033\uff68\034\uff68\036\uff68\040\uff68\045\uff68\056\uff68\057" +
    "\uff68\001\002\000\006\020\uff74\063\142\001\002\000\004" +
    "\020\245\001\002\000\004\062\246\001\002\000\024\004" +
    "\uff69\025\uff69\033\uff69\034\uff69\036\uff69\040\uff69\045\uff69" +
    "\056\uff69\057\uff69\001\002\000\026\004\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\035\uffad" +
    "\053\uffad\001\002\000\026\004\255\011\107\012\113\013" +
    "\105\014\112\015\122\016\120\017\257\035\252\053\251" +
    "\001\002\000\010\005\264\020\uff9f\060\263\001\002\000" +
    "\010\005\264\020\uff9f\060\263\001\002\000\010\005\264" +
    "\020\uff9f\060\263\001\002\000\004\020\274\001\002\000" +
    "\014\003\127\005\uffaa\017\130\020\uffaa\060\uffaa\001\002" +
    "\000\010\005\264\020\uff9f\060\263\001\002\000\026\004" +
    "\255\011\107\012\113\013\105\014\112\015\122\016\120" +
    "\017\257\035\252\053\251\001\002\000\004\020\261\001" +
    "\002\000\010\005\264\020\uff9f\060\263\001\002\000\004" +
    "\020\uffa8\001\002\000\026\004\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\035\uffa1\053\uffa1" +
    "\001\002\000\026\004\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\035\uffa3\053\uffa3\001\002" +
    "\000\026\004\255\011\107\012\113\013\105\014\112\015" +
    "\122\016\120\017\257\035\252\053\251\001\002\000\004" +
    "\020\uffa2\001\002\000\026\004\255\011\107\012\113\013" +
    "\105\014\112\015\122\016\120\017\257\035\252\053\251" +
    "\001\002\000\004\020\uffa0\001\002\000\004\020\uffa5\001" +
    "\002\000\010\005\264\020\uff9f\060\263\001\002\000\004" +
    "\020\uffa9\001\002\000\004\051\uffac\001\002\000\004\051" +
    "\276\001\002\000\022\004\043\033\uffae\034\uffae\036\056" +
    "\040\045\045\036\056\041\057\046\001\002\000\006\033" +
    "\300\034\uff9c\001\002\000\022\004\uff9e\025\303\034\uff9e" +
    "\036\uff9e\040\uff9e\045\uff9e\056\uff9e\057\uff9e\001\002\000" +
    "\004\034\302\001\002\000\024\004\uffab\025\uffab\033\uffab" +
    "\034\uffab\036\uffab\040\uffab\045\uffab\056\uffab\057\uffab\001" +
    "\002\000\020\004\043\034\uffae\036\056\040\045\045\036" +
    "\056\041\057\046\001\002\000\020\004\043\034\uffae\036" +
    "\056\040\045\045\036\056\041\057\046\001\002\000\004" +
    "\034\uff9d\001\002\000\004\034\uff9b\001\002\000\004\020" +
    "\uffa4\001\002\000\004\020\uffa6\001\002\000\004\020\uffa7" +
    "\001\002\000\020\004\043\025\uffae\036\056\040\045\045" +
    "\036\056\041\057\046\001\002\000\004\025\uffc7\001\002" +
    "\000\004\025\uffca\001\002\000\004\065\316\001\002\000" +
    "\004\060\317\001\002\000\032\004\uff70\007\uff70\011\uff70" +
    "\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\035" +
    "\uff70\053\uff70\064\uff70\001\002\000\032\004\121\007\117" +
    "\011\107\012\113\013\105\014\112\015\122\016\120\017" +
    "\124\035\114\053\110\064\106\001\002\000\004\062\uff6f" +
    "\001\002\000\004\062\323\001\002\000\024\004\uff6e\025" +
    "\uff6e\033\uff6e\034\uff6e\036\uff6e\040\uff6e\045\uff6e\056\uff6e" +
    "\057\uff6e\001\002\000\010\025\uffb4\033\uffb4\034\uffb4\001" +
    "\002\000\004\017\326\001\002\000\026\004\255\011\107" +
    "\012\113\013\105\014\112\015\122\016\120\017\257\035" +
    "\252\053\251\001\002\000\004\020\uff99\001\002\000\004" +
    "\020\331\001\002\000\004\032\332\001\002\000\004\025" +
    "\333\001\002\000\020\004\043\034\uffae\036\056\040\045" +
    "\045\036\056\041\057\046\001\002\000\004\034\uff98\001" +
    "\002\000\004\034\336\001\002\000\024\004\uff97\025\uff97" +
    "\033\uff97\034\uff97\036\uff97\040\uff97\045\uff97\056\uff97\057" +
    "\uff97\001\002\000\010\025\uffb5\033\uffb5\034\uffb5\001\002" +
    "\000\020\004\043\025\uffae\036\056\040\045\045\036\056" +
    "\041\057\046\001\002\000\004\025\uffc8\001\002\000\004" +
    "\025\uffc9\001\002\000\010\003\344\004\345\020\346\001" +
    "\002\000\004\020\352\001\002\000\004\020\350\001\002" +
    "\000\004\062\347\001\002\000\024\004\uff6c\025\uff6c\033" +
    "\uff6c\034\uff6c\036\uff6c\040\uff6c\045\uff6c\056\uff6c\057\uff6c" +
    "\001\002\000\004\062\351\001\002\000\024\004\uff6d\025" +
    "\uff6d\033\uff6d\034\uff6d\036\uff6d\040\uff6d\045\uff6d\056\uff6d" +
    "\057\uff6d\001\002\000\004\062\353\001\002\000\024\004" +
    "\uff6b\025\uff6b\033\uff6b\034\uff6b\036\uff6b\040\uff6b\045\uff6b" +
    "\056\uff6b\057\uff6b\001\002\000\004\004\355\001\002\000" +
    "\006\020\uffd8\063\uffd8\001\002\000\006\020\uffcb\063\357" +
    "\001\002\000\012\003\372\030\033\041\034\050\031\001" +
    "\002\000\004\020\361\001\002\000\004\065\362\001\002" +
    "\000\010\030\033\041\034\050\031\001\002\000\024\004" +
    "\uffd7\025\uffd7\031\uffd7\036\uffd7\040\uffd7\045\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\001\002\000\024\004\043\025\uffae\031" +
    "\051\036\056\040\045\045\036\055\060\056\041\057\046" +
    "\001\002\000\004\025\366\001\002\000\020\004\043\034" +
    "\uffae\036\056\040\045\045\036\056\041\057\046\001\002" +
    "\000\004\034\370\001\002\000\010\025\uffd6\037\uffd6\044" +
    "\uffd6\001\002\000\004\004\375\001\002\000\004\004\373" +
    "\001\002\000\006\020\uffcb\063\357\001\002\000\004\020" +
    "\uffcc\001\002\000\006\020\uffce\063\uffce\001\002\000\006" +
    "\020\uffcb\063\357\001\002\000\004\020\uffcd\001\002\000" +
    "\004\025\uffe2\001\002\000\004\025\uffdf\001\002\000\020" +
    "\004\043\034\uffae\036\056\040\045\045\036\056\041\057" +
    "\046\001\002\000\004\034\u0104\001\002\000\004\002\ufffc" +
    "\001\002\000\010\025\uffdd\037\017\044\012\001\002\000" +
    "\004\025\u0107\001\002\000\020\004\043\034\uffae\036\056" +
    "\040\045\045\036\056\041\057\046\001\002\000\004\034" +
    "\u0109\001\002\000\004\002\ufffd\001\002\000\004\025\u010b" +
    "\001\002\000\020\004\043\034\uffae\036\056\040\045\045" +
    "\036\056\041\057\046\001\002\000\004\034\u010d\001\002" +
    "\000\004\002\uffff\001\002\000\004\034\u010f\001\002\000" +
    "\004\002\ufffb\001\002\000\010\025\uffdd\037\017\044\012" +
    "\001\002\000\004\025\u0112\001\002\000\020\004\043\034" +
    "\uffae\036\056\040\045\045\036\056\041\057\046\001\002" +
    "\000\004\034\u0114\001\002\000\004\002\ufffe\001\002\000" +
    "\004\025\u0116\001\002\000\020\004\043\034\uffae\036\056" +
    "\040\045\045\036\056\041\057\046\001\002\000\004\034" +
    "\u0118\001\002\000\004\002\001\001\002\000\004\034\u0131" +
    "\001\002\000\004\004\u011c\001\002\000\010\025\uffdd\037" +
    "\017\044\012\001\002\000\004\017\u011d\001\002\000\012" +
    "\020\uffd5\030\uffd2\041\uffd2\050\uffd2\001\002\000\010\030" +
    "\033\041\034\050\031\001\002\000\004\020\u0120\001\002" +
    "\000\024\004\uffd4\025\uffd4\031\uffd4\036\uffd4\040\uffd4\045" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\001\002\000\024\004\043" +
    "\025\uffae\031\051\036\056\040\045\045\036\055\060\056" +
    "\041\057\046\001\002\000\004\025\u0123\001\002\000\020" +
    "\004\043\034\uffae\036\056\040\045\045\036\056\041\057" +
    "\046\001\002\000\004\034\u0125\001\002\000\010\025\uffd3" +
    "\037\uffd3\044\uffd3\001\002\000\004\004\u0127\001\002\000" +
    "\006\020\uffd1\063\uffd1\001\002\000\006\020\uffcb\063\357" +
    "\001\002\000\004\020\u012a\001\002\000\024\004\uffd0\025" +
    "\uffd0\031\uffd0\036\uffd0\040\uffd0\045\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\001\002\000\024\004\043\025\uffae\031\051\036" +
    "\056\040\045\045\036\055\060\056\041\057\046\001\002" +
    "\000\004\025\u012d\001\002\000\020\004\043\034\uffae\036" +
    "\056\040\045\045\036\056\041\057\046\001\002\000\004" +
    "\034\u012f\001\002\000\010\025\uffcf\037\uffcf\044\uffcf\001" +
    "\002\000\004\025\uffe0\001\002\000\004\025\uffde\001\002" +
    "\000\004\060\u0134\001\002\000\012\025\ufff9\037\ufff9\044" +
    "\ufff9\055\ufff9\001\002\000\020\003\u0135\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\001\002\000\004\062" +
    "\u0140\001\002\000\016\011\u0137\012\u0139\013\u013d\014\u013a" +
    "\015\u0138\016\u013c\001\002\000\004\062\ufff4\001\002\000" +
    "\004\062\uffef\001\002\000\004\062\ufff3\001\002\000\004" +
    "\062\ufff1\001\002\000\004\062\u013e\001\002\000\004\062" +
    "\ufff0\001\002\000\004\062\ufff2\001\002\000\014\004\u0132" +
    "\025\ufff5\037\ufff5\044\ufff5\055\ufff5\001\002\000\012\025" +
    "\ufff7\037\ufff7\044\ufff7\055\ufff7\001\002\000\012\025\ufff6" +
    "\037\ufff6\044\ufff6\055\ufff6\001\002\000\012\025\uffee\031" +
    "\uffee\037\uffee\044\uffee\001\002\000\006\063\uffec\065\uffec" +
    "\001\002\000\006\063\064\065\uffe7\001\002\000\004\065" +
    "\u0145\001\002\000\010\030\033\041\034\050\031\001\002" +
    "\000\004\062\u0147\001\002\000\014\004\uffeb\025\uffeb\031" +
    "\uffeb\037\uffeb\044\uffeb\001\002\000\014\004\u0142\025\uffed" +
    "\031\uffed\037\uffed\044\uffed\001\002\000\012\025\uffea\031" +
    "\uffea\037\uffea\044\uffea\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\005\014" +
    "\011\015\001\001\000\004\006\u0140\001\001\000\004\004" +
    "\u0132\001\001\000\004\053\u0119\001\001\000\006\005\u010f" +
    "\011\u0110\001\001\000\022\016\u010d\017\037\022\041\023" +
    "\046\025\047\026\054\027\051\030\052\001\001\000\006" +
    "\003\u0104\011\u0105\001\001\000\002\001\001\000\004\052" +
    "\020\001\001\000\002\001\001\000\004\012\021\001\001" +
    "\000\004\011\377\001\001\000\002\001\001\000\006\054" +
    "\025\056\024\001\001\000\004\010\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\031\001\001\000" +
    "\002\001\001\000\004\055\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\015\056\016\053\017\037\022" +
    "\041\023\046\025\047\026\054\027\051\030\052\041\043" +
    "\045\036\001\001\000\002\001\001\000\024\016\340\017" +
    "\037\022\041\023\046\025\047\026\054\027\051\030\052" +
    "\041\337\001\001\000\022\016\336\017\037\022\041\023" +
    "\046\025\047\026\054\027\051\030\052\001\001\000\004" +
    "\100\324\001\001\000\022\016\323\017\037\022\041\023" +
    "\046\025\047\026\054\027\051\030\052\001\001\000\004" +
    "\111\314\001\001\000\024\016\312\017\037\022\041\023" +
    "\046\025\047\026\054\027\051\030\052\045\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\234\017" +
    "\037\022\041\023\046\025\047\026\054\027\051\030\052" +
    "\001\001\000\022\016\233\017\037\022\041\023\046\025" +
    "\047\026\054\027\051\030\052\001\001\000\004\042\214" +
    "\001\001\000\022\016\213\017\037\022\041\023\046\025" +
    "\047\026\054\027\051\030\052\001\001\000\022\016\212" +
    "\017\037\022\041\023\046\025\047\026\054\027\051\030" +
    "\052\001\001\000\002\001\001\000\022\016\211\017\037" +
    "\022\041\023\046\025\047\026\054\027\051\030\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\061" +
    "\001\001\000\004\067\062\001\001\000\002\001\001\000" +
    "\004\007\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\066\001\001\000\002\001\001\000\004\070" +
    "\070\001\001\000\004\044\071\001\001\000\002\001\001" +
    "\000\004\051\073\001\001\000\004\007\074\001\001\000" +
    "\002\001\001\000\022\016\076\017\037\022\041\023\046" +
    "\025\047\026\054\027\051\030\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\110\026\114\031\115\034" +
    "\122\001\001\000\002\001\001\000\012\024\201\026\114" +
    "\031\115\034\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\124\026" +
    "\114\031\115\034\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\106\130\001\001\000" +
    "\012\024\137\026\114\031\115\034\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\140" +
    "\001\001\000\004\014\142\001\001\000\012\024\145\026" +
    "\114\031\115\034\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\146\001\001\000" +
    "\004\014\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\170\001" +
    "\001\000\004\105\165\001\001\000\012\024\163\026\114" +
    "\031\115\034\122\001\001\000\002\001\001\000\004\103" +
    "\160\001\001\000\012\024\161\026\114\031\115\034\122" +
    "\001\001\000\004\032\162\001\001\000\002\001\001\000" +
    "\004\032\164\001\001\000\002\001\001\000\012\024\166" +
    "\026\114\031\115\034\122\001\001\000\004\032\167\001" +
    "\001\000\002\001\001\000\012\024\171\026\114\031\115" +
    "\034\122\001\001\000\004\032\172\001\001\000\002\001" +
    "\001\000\012\024\174\026\114\031\115\034\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\177\017" +
    "\037\022\041\023\046\025\047\026\054\027\051\030\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\204\026\114\031\115\034\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\207\017\037\022\041\023\046\025\047\026\054" +
    "\027\051\030\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\217\001" +
    "\001\000\004\043\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\236" +
    "\026\114\031\115\034\122\001\001\000\004\114\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\247\001\001\000\010" +
    "\020\253\026\252\034\255\001\001\000\004\033\310\001" +
    "\001\000\004\033\307\001\001\000\004\033\306\001\001" +
    "\000\002\001\001\000\004\074\271\001\001\000\004\033" +
    "\270\001\001\000\010\020\257\026\252\034\255\001\001" +
    "\000\002\001\001\000\004\033\261\001\001\000\002\001" +
    "\001\000\004\076\266\001\001\000\004\075\264\001\001" +
    "\000\010\020\265\026\252\034\255\001\001\000\002\001" +
    "\001\000\010\020\267\026\252\034\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\272\001\001\000" +
    "\002\001\001\000\004\073\274\001\001\000\002\001\001" +
    "\000\022\016\276\017\037\022\041\023\046\025\047\026" +
    "\054\027\051\030\052\001\001\000\004\021\300\001\001" +
    "\000\004\077\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\305\017\037\022\041\023\046\025\047" +
    "\026\054\027\051\030\052\001\001\000\022\016\304\017" +
    "\037\022\041\023\046\025\047\026\054\027\051\030\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\313" +
    "\017\037\022\041\023\046\025\047\026\054\027\051\030" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\112\317\001\001\000" +
    "\012\024\320\026\114\031\115\034\122\001\001\000\004" +
    "\113\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\326\026\252" +
    "\034\255\001\001\000\004\101\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\333" +
    "\017\037\022\041\023\046\025\047\026\054\027\051\030" +
    "\052\001\001\000\004\102\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\341\017" +
    "\037\022\041\023\046\025\047\026\054\027\051\030\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\355\001\001\000\004\013\357\001\001\000\004\010" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\362\001\001\000\004\060\363\001\001\000\030\015" +
    "\364\016\053\017\037\022\041\023\046\025\047\026\054" +
    "\027\051\030\052\041\043\045\036\001\001\000\002\001" +
    "\001\000\022\016\366\017\037\022\041\023\046\025\047" +
    "\026\054\027\051\030\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\373\001\001\000\002\001\001\000\004\066\375\001" +
    "\001\000\004\013\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\u0102\017\037\022" +
    "\041\023\046\025\047\026\054\027\051\030\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0109\001" +
    "\001\000\002\001\001\000\022\016\u0107\017\037\022\041" +
    "\023\046\025\047\026\054\027\051\030\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\u010b\017\037\022\041\023\046\025\047\026\054\027" +
    "\051\030\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0114\001" +
    "\001\000\002\001\001\000\022\016\u0112\017\037\022\041" +
    "\023\046\025\047\026\054\027\051\030\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\u0116\017\037\022\041\023\046\025\047\026\054\027" +
    "\051\030\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u011a\001\001\000\004\011" +
    "\u012f\001\001\000\002\001\001\000\006\061\u011e\063\u011d" +
    "\001\001\000\004\010\u0125\001\001\000\002\001\001\000" +
    "\004\062\u0120\001\001\000\030\015\u0121\016\053\017\037" +
    "\022\041\023\046\025\047\026\054\027\051\030\052\041" +
    "\043\045\036\001\001\000\002\001\001\000\022\016\u0123" +
    "\017\037\022\041\023\046\025\047\026\054\027\051\030" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u0127\001\001\000\004\013\u0128\001" +
    "\001\000\002\001\001\000\004\065\u012a\001\001\000\030" +
    "\015\u012b\016\053\017\037\022\041\023\046\025\047\026" +
    "\054\027\051\030\052\041\043\045\036\001\001\000\002" +
    "\001\001\000\022\016\u012d\017\037\022\041\023\046\025" +
    "\047\026\054\027\051\030\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u0135\001\001" +
    "\000\002\001\001\000\004\040\u013a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u013e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0142\001\001\000\004\007" +
    "\u0143\001\001\000\002\001\001\000\004\010\u0145\001\001" +
    "\000\002\001\001\000\004\050\u0147\001\001\000\004\006" +
    "\u0148\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" : "+message);
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);            
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
            //m.append("\n" + "Token: " + s.value);
        }
        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){

      
        try {
              // creando buffered writer 
            BufferedWriter writer = new BufferedWriter(new FileWriter("assembler_code.txt"));
            SemanticActions.setWriter(writer);
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM IDENTIFIER globals constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM IDENTIFIER globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROGRAM IDENTIFIER functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= PROGRAM IDENTIFIER BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.report_error("Error fatal :(", e); 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberConst(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= IDENTIFIER EQUAL NT$0 literal_const SEMI constants_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_body ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error al declarar una constante\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal_const ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertGlobalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal_const ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertGlobalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal_const ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertGlobalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal_const ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertGlobalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal_const ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertGlobalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal_const ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertGlobalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globals_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertGlobalVarST(ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // globals_body ::= IDENTIFIER NT$1 globals_list COLON Type SEMI NT$2 globals_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // globals_list ::= COMMA IDENTIFIER NT$3 globals_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =null;
SemanticActions.resetLocalsST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions ::= FUNCTION NT$4 function_header functions 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;
SemanticActions.resetLocalsST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // functions ::= PROCEDURE NT$5 procedure_header functions 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // functions ::= FUNCTION error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               parser.report_error("Error al declarar la funcion\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // functions ::= PROCEDURE error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    parser.report_error("Error al declarar la funcion\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertFunctionST(ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_header ::= IDENTIFIER OPEN_PARENTHESIS NT$6 CLOSE_PARENTHESIS COLON Type NT$7 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertFunctionST(ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_header ::= IDENTIFIER OPEN_PARENTHESIS NT$8 Type IDENTIFIER NT$9 parameter_list CLOSE_PARENTHESIS COLON Type NT$10 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
SemanticActions.insertProcedureST(ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS NT$11 CLOSE_PARENTHESIS NT$12 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
SemanticActions.insertProcedureST(ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS NT$13 Type IDENTIFIER NT$14 parameter_list CLOSE_PARENTHESIS NT$15 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$16 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameter_list ::= COMMA Type IDENTIFIER NT$16 parameter_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameter_list ::= COMMA error IDENTIFIER parameter_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    parser.report_error("No especificado el tipo de un parametro\n", e); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_body ::= constants_local globals_local statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_body ::= globals_local constants_local statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_body ::= globals_local statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_body ::= constants_local statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function_body ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // globals_local ::= VAR globals_body_local 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_local",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // globals_body_local ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body_local",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertLocalVarST(ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // globals_body_local ::= IDENTIFIER NT$17 globals_list COLON Type SEMI NT$18 globals_body_local 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body_local",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // constants_local ::= CONST constants_body_local 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_local",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberConst(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // constants_body_local ::= IDENTIFIER EQUAL NT$19 literal_const_local SEMI constants_body_local 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body_local",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // constants_body_local ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error al declarar una constante\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body_local",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // constants_body_local ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body_local",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal_const_local ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertLocalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const_local",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal_const_local ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertLocalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const_local",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal_const_local ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertLocalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const_local",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal_const_local ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertLocalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const_local",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal_const_local ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertLocalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const_local",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal_const_local ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertLocalConstTS(li.toString(),lileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const_local",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statements ::= while_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statements ::= for_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statements ::= fun_call statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statements ::= read statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statements ::= write statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$20 ::= 
            {
              Object RESULT =null;
SemanticActions.startIf(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
SemanticActions.evalIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_statement ::= IF OPEN_PARENTHESIS NT$20 cond CLOSE_PARENTHESIS NT$21 THEN statements else_statement END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$22 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVariable(i.toString(),ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cond ::= IDENTIFIER NT$22 cond2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cond ::= TRUE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cond ::= FALSE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cond ::= literal cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cond ::= fun_call cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$23 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cond2 ::= BOOLEAN_OPERATOR NT$23 cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$24 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond2 ::= EQUAL NT$24 cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cond2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$25 ::= 
            {
              Object RESULT =null;
SemanticActions.startElse();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_statement ::= ELSE NT$25 statements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		SemanticActions.endIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else_statement ::= ELSE BEGIN statements 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                            parser.report_error("Syntax error in line " + eleft+1 + ": El else no lleva BEGIN\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$26 ::= 
            {
              Object RESULT =null;
SemanticActions.startWhile(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
SemanticActions.evalWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
SemanticActions.endWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // while_statement ::= WHILE NT$26 OPEN_PARENTHESIS cond NT$27 CLOSE_PARENTHESIS DO BEGIN statements NT$28 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_statement ::= FOR IDENTIFIER COLON EQUAL exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_statement ::= FOR error TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 parser.report_error("Debe de asignar un valor\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_statement ::= FOR error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en el FOR", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // literal ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // literal ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // literal ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // literal ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp ::= exp1 exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exp1 ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberVariable(i.toString(),ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exp1 ::= ARITHMETICOP IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberVariable(i.toString(),ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exp1 ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exp1 ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exp1 ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exp1 ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exp1 ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exp1 ::= MINUSOP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exp1 ::= ARITHMETICOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$29 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // exp2 ::= BOOLEAN_OPERATOR NT$29 exp exp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$30 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exp2 ::= ARITHMETICOP NT$30 exp exp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // exp2 ::= EQUAL exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$31 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // exp2 ::= MINUSOP NT$31 exp exp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // exp2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$32 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.functionIdError(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS NT$32 exp NT$33 parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // fun_call ::= IDENTIFIER error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en los parentesis al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parameter_list_call ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$34 ::= 
            {
              Object RESULT =null;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parameter_list_call ::= COMMA exp NT$34 parameter_list_call 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$35 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVariable(i.toString(),ileft+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // assignment ::= IDENTIFIER NT$35 COLON EQUAL NT$36 exp NT$37 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // read ::= READ OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // read ::= READ OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Error en el READ\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$38 ::= 
            {
              Object RESULT =null;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // write ::= WRITE OPEN_PARENTHESIS exp NT$38 parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // write ::= WRITE OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Error en el WRITE: se necesita al menos un parametro\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
