
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import semantic.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\012\000\002\002\004\000\002\002" +
    "\012\000\002\002\011\000\002\002\011\000\002\002\010" +
    "\000\002\002\007\000\002\002\003\000\002\003\004\000" +
    "\002\041\002\000\002\004\010\000\002\004\006\000\002" +
    "\004\002\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\005\004\000\002\006\002\000\002\042\002\000" +
    "\002\043\002\000\002\006\012\000\002\044\002\000\002" +
    "\007\006\000\002\007\002\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\002\000" +
    "\002\045\002\000\002\046\002\000\002\012\015\000\002" +
    "\047\002\000\002\050\002\000\002\051\002\000\002\012" +
    "\021\000\002\052\002\000\002\053\002\000\002\035\013" +
    "\000\002\054\002\000\002\055\002\000\002\056\002\000" +
    "\002\035\017\000\002\057\002\000\002\013\007\000\002" +
    "\013\006\000\002\013\002\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\015\004\000\002\015\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\002\000\002\060\002\000\002\061" +
    "\002\000\002\017\014\000\002\062\002\000\002\020\005" +
    "\000\002\020\006\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\063\002\000\002" +
    "\033\005\000\002\064\002\000\002\033\005\000\002\033" +
    "\002\000\002\065\002\000\002\021\005\000\002\021\002" +
    "\000\002\021\005\000\002\066\002\000\002\067\002\000" +
    "\002\070\002\000\002\022\015\000\002\023\015\000\002" +
    "\023\012\000\002\023\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\024\004\000\002\031\003\000" +
    "\002\031\004\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\031\003\000\002\071\002\000\002\032\006" +
    "\000\002\072\002\000\002\032\006\000\002\032\005\000" +
    "\002\032\005\000\002\032\002\000\002\073\002\000\002" +
    "\026\011\000\002\026\006\000\002\026\007\000\002\026" +
    "\006\000\002\026\006\000\002\014\002\000\002\074\002" +
    "\000\002\014\006\000\002\075\002\000\002\076\002\000" +
    "\002\077\002\000\002\025\012\000\002\027\007\000\002" +
    "\027\006\000\002\027\007\000\002\100\002\000\002\030" +
    "\011\000\002\030\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\006\003\005\023\006\001\002\000\004\002" +
    "\u012c\001\002\000\004\002\ufffa\001\002\000\004\004\007" +
    "\001\002\000\014\025\014\031\011\037\017\044\012\055" +
    "\010\001\002\000\026\004\u0120\025\uffed\031\uffed\036\uffed" +
    "\037\uffed\040\uffed\044\uffed\045\uffed\056\uffed\057\uffed\001" +
    "\002\000\026\004\u0110\025\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\044\ufff5\045\ufff5\055\ufff5\056\ufff5\057\ufff5\001\002\000" +
    "\006\003\371\004\372\001\002\000\012\025\uffdf\037\017" +
    "\044\012\055\010\001\002\000\020\004\042\034\uffc0\036" +
    "\053\040\043\045\035\056\040\057\044\001\002\000\012" +
    "\025\uffdf\031\011\037\017\044\012\001\002\000\004\025" +
    "\341\001\002\000\006\003\020\004\022\001\002\000\004" +
    "\034\340\001\002\000\010\025\uffdf\037\017\044\012\001" +
    "\002\000\004\017\023\001\002\000\012\020\uffde\030\uffdb" +
    "\041\uffdb\050\uffdb\001\002\000\010\030\032\041\033\050" +
    "\030\001\002\000\004\020\026\001\002\000\004\065\027" +
    "\001\002\000\010\030\032\041\033\050\030\001\002\000" +
    "\026\004\uffe4\025\uffe4\031\uffe4\036\uffe4\040\uffe4\045\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\062\uffe4\001\002\000\024\004" +
    "\uffdd\025\uffdd\031\uffdd\036\uffdd\040\uffdd\045\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\001\002\000\026\004\uffe5\025\uffe5\031" +
    "\uffe5\036\uffe5\040\uffe5\045\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\062\uffe5\001\002\000\026\004\uffe6\025\uffe6\031\uffe6\036" +
    "\uffe6\040\uffe6\045\uffe6\055\uffe6\056\uffe6\057\uffe6\062\uffe6" +
    "\001\002\000\024\004\042\025\uffc0\031\011\036\053\040" +
    "\043\045\035\055\010\056\040\057\044\001\002\000\004" +
    "\017\302\001\002\000\022\004\042\025\uffc0\031\011\036" +
    "\053\040\043\045\035\056\040\057\044\001\002\000\024" +
    "\004\042\025\uffc0\033\uffc0\034\uffc0\036\053\040\043\045" +
    "\035\056\040\057\044\001\002\000\004\017\uffac\001\002" +
    "\000\024\004\042\025\uffc0\033\uffc0\034\uffc0\036\053\040" +
    "\043\045\035\056\040\057\044\001\002\000\010\003\112" +
    "\017\113\065\uff85\001\002\000\004\017\211\001\002\000" +
    "\004\017\200\001\002\000\024\004\042\025\uffc0\033\uffc0" +
    "\034\uffc0\036\053\040\043\045\035\056\040\057\044\001" +
    "\002\000\024\004\042\025\uffc0\033\uffc0\034\uffc0\036\053" +
    "\040\043\045\035\056\040\057\044\001\002\000\024\004" +
    "\042\025\uffc0\033\uffc0\034\uffc0\036\053\040\043\045\035" +
    "\056\040\057\044\001\002\000\024\004\042\025\uffc0\033" +
    "\uffc0\034\uffc0\036\053\040\043\045\035\056\040\057\044" +
    "\001\002\000\004\025\uffc8\001\002\000\024\004\042\025" +
    "\uffc0\033\uffc0\034\uffc0\036\053\040\043\045\035\056\040" +
    "\057\044\001\002\000\006\003\064\004\065\001\002\000" +
    "\004\025\061\001\002\000\022\004\042\025\uffc0\036\053" +
    "\040\043\045\035\055\010\056\040\057\044\001\002\000" +
    "\020\004\042\025\uffc0\036\053\040\043\045\035\056\040" +
    "\057\044\001\002\000\004\025\uffc9\001\002\000\004\025" +
    "\uffcc\001\002\000\020\004\042\034\uffc0\036\053\040\043" +
    "\045\035\056\040\057\044\001\002\000\004\034\063\001" +
    "\002\000\010\025\uffdc\037\uffdc\044\uffdc\001\002\000\006" +
    "\034\165\052\164\001\002\000\004\065\066\001\002\000" +
    "\004\060\067\001\002\000\032\004\104\007\103\011\072" +
    "\012\076\013\070\014\075\015\106\016\102\017\107\035" +
    "\077\053\074\064\071\001\002\000\024\005\uffa3\007\uffa3" +
    "\020\uffa3\032\uffa3\052\uffa3\060\uffa3\062\uffa3\063\uffa3\064" +
    "\uffa3\001\002\000\032\004\104\007\103\011\072\012\076" +
    "\013\070\014\075\015\106\016\102\017\107\035\077\053" +
    "\074\064\071\001\002\000\024\005\uffa5\007\uffa5\020\uffa5" +
    "\032\uffa5\052\uffa5\060\uffa5\062\uffa5\063\uffa5\064\uffa5\001" +
    "\002\000\004\052\155\001\002\000\024\005\uff9b\007\uff9b" +
    "\020\uff9b\032\uff9b\052\uff9b\060\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\001\002\000\024\005\uffa2\007\uffa2\020\uffa2\032\uffa2" +
    "\052\uffa2\060\uffa2\062\uffa2\063\uffa2\064\uffa2\001\002\000" +
    "\024\005\uffa4\007\uffa4\020\uffa4\032\uffa4\052\uffa4\060\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\001\002\000\024\005\uff9a\007" +
    "\uff9a\020\uff9a\032\uff9a\052\uff9a\060\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\001\002\000\024\005\uff98\007\uff98\020\uff98\032" +
    "\uff98\052\uff98\060\uff98\062\uff98\063\uff98\064\uff98\001\002" +
    "\000\024\005\142\007\136\020\uff8f\032\uff8f\052\uff8f\060" +
    "\140\062\uff8f\063\uff8f\064\137\001\002\000\024\005\uffa1" +
    "\007\uffa1\020\uffa1\032\uffa1\052\uffa1\060\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\001\002\000\026\004\135\005\uff96\007\uff96" +
    "\020\uff96\032\uff96\052\uff96\060\uff96\062\uff96\063\uff96\064" +
    "\uff96\001\002\000\030\003\112\005\uff9e\007\uff9e\017\113" +
    "\020\uff9e\032\uff9e\052\uff9e\060\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\001\002\000\024\005\uff99\007\uff99\020\uff99\032\uff99" +
    "\052\uff99\060\uff99\062\uff99\063\uff99\064\uff99\001\002\000" +
    "\024\005\uffa0\007\uffa0\020\uffa0\032\uffa0\052\uffa0\060\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\001\002\000\032\004\104\007" +
    "\103\011\072\012\076\013\070\014\075\015\106\016\102" +
    "\017\107\035\077\053\074\064\071\001\002\000\004\020" +
    "\111\001\002\000\024\005\uff9c\007\uff9c\020\uff9c\032\uff9c" +
    "\052\uff9c\060\uff9c\062\uff9c\063\uff9c\064\uff9c\001\002\000" +
    "\004\020\133\001\002\000\036\003\115\004\104\007\103" +
    "\011\072\012\076\013\070\014\075\015\106\016\102\017" +
    "\107\020\116\035\077\053\074\064\071\001\002\000\006" +
    "\020\uff8e\063\uff8e\001\002\000\006\020\120\062\121\001" +
    "\002\000\004\062\117\001\002\000\046\004\uff8c\005\uff8c" +
    "\007\uff8c\020\uff8c\025\uff8c\032\uff8c\033\uff8c\034\uff8c\036" +
    "\uff8c\040\uff8c\045\uff8c\052\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\062\uff8c\063\uff8c\064\uff8c\001\002\000\004\062\122\001" +
    "\002\000\046\004\uff89\005\uff89\007\uff89\020\uff89\025\uff89" +
    "\032\uff89\033\uff89\034\uff89\036\uff89\040\uff89\045\uff89\052" +
    "\uff89\056\uff89\057\uff89\060\uff89\062\uff89\063\uff89\064\uff89" +
    "\001\002\000\046\004\uff8b\005\uff8b\007\uff8b\020\uff8b\025" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\036\uff8b\040\uff8b\045\uff8b" +
    "\052\uff8b\056\uff8b\057\uff8b\060\uff8b\062\uff8b\063\uff8b\064" +
    "\uff8b\001\002\000\006\020\uff88\063\124\001\002\000\032" +
    "\004\104\007\103\011\072\012\076\013\070\014\075\015" +
    "\106\016\102\017\107\035\077\053\074\064\071\001\002" +
    "\000\004\020\126\001\002\000\004\062\127\001\002\000" +
    "\046\004\uff8d\005\uff8d\007\uff8d\020\uff8d\025\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\036\uff8d\040\uff8d\045\uff8d\052\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002" +
    "\000\006\020\uff87\063\uff87\001\002\000\006\020\uff88\063" +
    "\124\001\002\000\004\020\uff86\001\002\000\004\062\134" +
    "\001\002\000\046\004\uff8a\005\uff8a\007\uff8a\020\uff8a\025" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\036\uff8a\040\uff8a\045\uff8a" +
    "\052\uff8a\056\uff8a\057\uff8a\060\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\001\002\000\024\005\uff9d\007\uff9d\020\uff9d\032\uff9d" +
    "\052\uff9d\060\uff9d\062\uff9d\063\uff9d\064\uff9d\001\002\000" +
    "\032\004\uff93\007\uff93\011\uff93\012\uff93\013\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\035\uff93\053\uff93\064\uff93\001" +
    "\002\000\032\004\104\007\103\011\072\012\076\013\070" +
    "\014\075\015\106\016\102\017\107\035\077\053\074\064" +
    "\071\001\002\000\032\004\104\007\103\011\072\012\076" +
    "\013\070\014\075\015\106\016\102\017\107\035\077\053" +
    "\074\064\071\001\002\000\024\005\uff9f\007\uff9f\020\uff9f" +
    "\032\uff9f\052\uff9f\060\uff9f\062\uff9f\063\uff9f\064\uff9f\001" +
    "\002\000\032\004\uff95\007\uff95\011\uff95\012\uff95\013\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\035\uff95\053\uff95\064" +
    "\uff95\001\002\000\032\004\104\007\103\011\072\012\076" +
    "\013\070\014\075\015\106\016\102\017\107\035\077\053" +
    "\074\064\071\001\002\000\024\005\142\007\136\020\uff8f" +
    "\032\uff8f\052\uff8f\060\140\062\uff8f\063\uff8f\064\137\001" +
    "\002\000\024\005\uff94\007\uff94\020\uff94\032\uff94\052\uff94" +
    "\060\uff94\062\uff94\063\uff94\064\uff94\001\002\000\024\005" +
    "\142\007\136\020\uff8f\032\uff8f\052\uff8f\060\140\062\uff8f" +
    "\063\uff8f\064\137\001\002\000\024\005\uff91\007\uff91\020" +
    "\uff91\032\uff91\052\uff91\060\uff91\062\uff91\063\uff91\064\uff91" +
    "\001\002\000\024\005\142\007\136\020\uff8f\032\uff8f\052" +
    "\uff8f\060\140\062\uff8f\063\uff8f\064\137\001\002\000\024" +
    "\005\uff90\007\uff90\020\uff90\032\uff90\052\uff90\060\uff90\062" +
    "\uff90\063\uff90\064\uff90\001\002\000\032\004\104\007\103" +
    "\011\072\012\076\013\070\014\075\015\106\016\102\017" +
    "\107\035\077\053\074\064\071\001\002\000\024\005\142" +
    "\007\136\020\uff8f\032\uff8f\052\uff8f\060\140\062\uff8f\063" +
    "\uff8f\064\137\001\002\000\024\005\uff92\007\uff92\020\uff92" +
    "\032\uff92\052\uff92\060\uff92\062\uff92\063\uff92\064\uff92\001" +
    "\002\000\032\004\104\007\103\011\072\012\076\013\070" +
    "\014\075\015\106\016\102\017\107\035\077\053\074\064" +
    "\071\001\002\000\004\032\157\001\002\000\004\025\160" +
    "\001\002\000\020\004\042\034\uffc0\036\053\040\043\045" +
    "\035\056\040\057\044\001\002\000\004\034\162\001\002" +
    "\000\024\004\uffa8\025\uffa8\033\uffa8\034\uffa8\036\uffa8\040" +
    "\uffa8\045\uffa8\056\uffa8\057\uffa8\001\002\000\024\005\uff97" +
    "\007\uff97\020\uff97\032\uff97\052\uff97\060\uff97\062\uff97\063" +
    "\uff97\064\uff97\001\002\000\032\004\104\007\103\011\072" +
    "\012\076\013\070\014\075\015\106\016\102\017\107\035" +
    "\077\053\074\064\071\001\002\000\024\004\uffa6\025\uffa6" +
    "\033\uffa6\034\uffa6\036\uffa6\040\uffa6\045\uffa6\056\uffa6\057" +
    "\uffa6\001\002\000\004\032\167\001\002\000\004\025\170" +
    "\001\002\000\020\004\042\034\uffc0\036\053\040\043\045" +
    "\035\056\040\057\044\001\002\000\004\034\172\001\002" +
    "\000\024\004\uffa7\025\uffa7\033\uffa7\034\uffa7\036\uffa7\040" +
    "\uffa7\045\uffa7\056\uffa7\057\uffa7\001\002\000\010\025\uffc3" +
    "\033\uffc3\034\uffc3\001\002\000\010\025\uffc1\033\uffc1\034" +
    "\uffc1\001\002\000\010\025\uffc2\033\uffc2\034\uffc2\001\002" +
    "\000\010\025\uffc4\033\uffc4\034\uffc4\001\002\000\010\025" +
    "\uffc5\033\uffc5\034\uffc5\001\002\000\034\003\202\004\104" +
    "\007\103\011\072\012\076\013\070\014\075\015\106\016" +
    "\102\017\107\035\077\053\074\064\071\001\002\000\006" +
    "\020\uff7e\063\uff7e\001\002\000\004\020\203\001\002\000" +
    "\004\062\204\001\002\000\024\004\uff7c\025\uff7c\033\uff7c" +
    "\034\uff7c\036\uff7c\040\uff7c\045\uff7c\056\uff7c\057\uff7c\001" +
    "\002\000\006\020\uff88\063\124\001\002\000\004\020\207" +
    "\001\002\000\004\062\210\001\002\000\024\004\uff7d\025" +
    "\uff7d\033\uff7d\034\uff7d\036\uff7d\040\uff7d\045\uff7d\056\uff7d" +
    "\057\uff7d\001\002\000\026\004\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\035\uffbf\053\uffbf" +
    "\001\002\000\026\004\217\011\072\012\076\013\070\014" +
    "\075\015\106\016\102\017\221\035\214\053\213\001\002" +
    "\000\010\005\226\020\uffb1\060\225\001\002\000\010\005" +
    "\226\020\uffb1\060\225\001\002\000\010\005\226\020\uffb1" +
    "\060\225\001\002\000\004\020\236\001\002\000\014\003" +
    "\112\005\uffbc\017\113\020\uffbc\060\uffbc\001\002\000\010" +
    "\005\226\020\uffb1\060\225\001\002\000\026\004\217\011" +
    "\072\012\076\013\070\014\075\015\106\016\102\017\221" +
    "\035\214\053\213\001\002\000\004\020\223\001\002\000" +
    "\010\005\226\020\uffb1\060\225\001\002\000\004\020\uffba" +
    "\001\002\000\026\004\uffb3\011\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\035\uffb3\053\uffb3\001\002" +
    "\000\026\004\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\035\uffb5\053\uffb5\001\002\000\026" +
    "\004\217\011\072\012\076\013\070\014\075\015\106\016" +
    "\102\017\221\035\214\053\213\001\002\000\004\020\uffb4" +
    "\001\002\000\026\004\217\011\072\012\076\013\070\014" +
    "\075\015\106\016\102\017\221\035\214\053\213\001\002" +
    "\000\004\020\uffb2\001\002\000\004\020\uffb7\001\002\000" +
    "\010\005\226\020\uffb1\060\225\001\002\000\004\020\uffbb" +
    "\001\002\000\004\051\uffbe\001\002\000\004\051\240\001" +
    "\002\000\022\004\042\033\uffc0\034\uffc0\036\053\040\043" +
    "\045\035\056\040\057\044\001\002\000\006\033\242\034" +
    "\uffae\001\002\000\022\004\uffb0\025\246\034\uffb0\036\uffb0" +
    "\040\uffb0\045\uffb0\056\uffb0\057\uffb0\001\002\000\004\034" +
    "\244\001\002\000\024\004\uffbd\025\uffbd\033\uffbd\034\uffbd" +
    "\036\uffbd\040\uffbd\045\uffbd\056\uffbd\057\uffbd\001\002\000" +
    "\020\004\042\034\uffc0\036\053\040\043\045\035\056\040" +
    "\057\044\001\002\000\020\004\042\034\uffc0\036\053\040" +
    "\043\045\035\056\040\057\044\001\002\000\004\034\uffad" +
    "\001\002\000\004\034\uffaf\001\002\000\004\020\uffb6\001" +
    "\002\000\004\020\uffb8\001\002\000\004\020\uffb9\001\002" +
    "\000\004\065\255\001\002\000\004\060\256\001\002\000" +
    "\032\004\uff84\007\uff84\011\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\035\uff84\053\uff84\064\uff84\001" +
    "\002\000\032\004\104\007\103\011\072\012\076\013\070" +
    "\014\075\015\106\016\102\017\107\035\077\053\074\064" +
    "\071\001\002\000\004\062\uff83\001\002\000\004\062\262" +
    "\001\002\000\024\004\uff82\025\uff82\033\uff82\034\uff82\036" +
    "\uff82\040\uff82\045\uff82\056\uff82\057\uff82\001\002\000\010" +
    "\025\uffc6\033\uffc6\034\uffc6\001\002\000\004\017\265\001" +
    "\002\000\026\004\217\011\072\012\076\013\070\014\075" +
    "\015\106\016\102\017\221\035\214\053\213\001\002\000" +
    "\004\020\uffab\001\002\000\004\020\270\001\002\000\004" +
    "\032\271\001\002\000\004\025\272\001\002\000\020\004" +
    "\042\034\uffc0\036\053\040\043\045\035\056\040\057\044" +
    "\001\002\000\004\034\uffaa\001\002\000\004\034\275\001" +
    "\002\000\024\004\uffa9\025\uffa9\033\uffa9\034\uffa9\036\uffa9" +
    "\040\uffa9\045\uffa9\056\uffa9\057\uffa9\001\002\000\010\025" +
    "\uffc7\033\uffc7\034\uffc7\001\002\000\004\025\uffca\001\002" +
    "\000\020\004\042\025\uffc0\036\053\040\043\045\035\056" +
    "\040\057\044\001\002\000\004\025\uffcb\001\002\000\010" +
    "\003\303\004\305\020\304\001\002\000\004\020\311\001" +
    "\002\000\004\062\310\001\002\000\004\020\306\001\002" +
    "\000\004\062\307\001\002\000\024\004\uff81\025\uff81\033" +
    "\uff81\034\uff81\036\uff81\040\uff81\045\uff81\056\uff81\057\uff81" +
    "\001\002\000\024\004\uff80\025\uff80\033\uff80\034\uff80\036" +
    "\uff80\040\uff80\045\uff80\056\uff80\057\uff80\001\002\000\004" +
    "\062\312\001\002\000\024\004\uff7f\025\uff7f\033\uff7f\034" +
    "\uff7f\036\uff7f\040\uff7f\045\uff7f\056\uff7f\057\uff7f\001\002" +
    "\000\004\004\314\001\002\000\006\020\uffda\063\uffda\001" +
    "\002\000\006\020\uffcd\063\316\001\002\000\012\003\331" +
    "\030\032\041\033\050\030\001\002\000\004\020\320\001" +
    "\002\000\004\065\321\001\002\000\010\030\032\041\033" +
    "\050\030\001\002\000\024\004\uffd9\025\uffd9\031\uffd9\036" +
    "\uffd9\040\uffd9\045\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002" +
    "\000\024\004\042\025\uffc0\031\011\036\053\040\043\045" +
    "\035\055\010\056\040\057\044\001\002\000\004\025\325" +
    "\001\002\000\020\004\042\034\uffc0\036\053\040\043\045" +
    "\035\056\040\057\044\001\002\000\004\034\327\001\002" +
    "\000\010\025\uffd8\037\uffd8\044\uffd8\001\002\000\004\004" +
    "\334\001\002\000\004\004\332\001\002\000\006\020\uffcd" +
    "\063\316\001\002\000\004\020\uffce\001\002\000\006\020" +
    "\uffd0\063\uffd0\001\002\000\006\020\uffcd\063\316\001\002" +
    "\000\004\020\uffcf\001\002\000\004\025\uffe3\001\002\000" +
    "\004\025\uffe1\001\002\000\020\004\042\034\uffc0\036\053" +
    "\040\043\045\035\056\040\057\044\001\002\000\004\034" +
    "\343\001\002\000\004\002\ufffc\001\002\000\010\025\uffdf" +
    "\037\017\044\012\001\002\000\004\025\346\001\002\000" +
    "\020\004\042\034\uffc0\036\053\040\043\045\035\056\040" +
    "\057\044\001\002\000\004\034\350\001\002\000\004\002" +
    "\ufffd\001\002\000\004\025\352\001\002\000\020\004\042" +
    "\034\uffc0\036\053\040\043\045\035\056\040\057\044\001" +
    "\002\000\004\034\354\001\002\000\004\002\uffff\001\002" +
    "\000\004\034\356\001\002\000\004\002\ufffb\001\002\000" +
    "\010\025\uffdf\037\017\044\012\001\002\000\004\025\361" +
    "\001\002\000\020\004\042\034\uffc0\036\053\040\043\045" +
    "\035\056\040\057\044\001\002\000\004\034\363\001\002" +
    "\000\004\002\ufffe\001\002\000\004\025\365\001\002\000" +
    "\020\004\042\034\uffc0\036\053\040\043\045\035\056\040" +
    "\057\044\001\002\000\004\034\367\001\002\000\004\002" +
    "\001\001\002\000\010\025\uffdf\037\017\044\012\001\002" +
    "\000\004\034\u010e\001\002\000\004\017\373\001\002\000" +
    "\012\020\uffd7\030\uffd4\041\uffd4\050\uffd4\001\002\000\004" +
    "\020\u0108\001\002\000\010\030\032\041\033\050\030\001" +
    "\002\000\004\004\377\001\002\000\006\020\uffd3\063\uffd3" +
    "\001\002\000\006\020\uffcd\063\316\001\002\000\004\020" +
    "\u0102\001\002\000\024\004\uffd2\025\uffd2\031\uffd2\036\uffd2" +
    "\040\uffd2\045\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002\000" +
    "\024\004\042\025\uffc0\031\011\036\053\040\043\045\035" +
    "\055\010\056\040\057\044\001\002\000\004\025\u0105\001" +
    "\002\000\020\004\042\034\uffc0\036\053\040\043\045\035" +
    "\056\040\057\044\001\002\000\004\034\u0107\001\002\000" +
    "\010\025\uffd1\037\uffd1\044\uffd1\001\002\000\024\004\uffd6" +
    "\025\uffd6\031\uffd6\036\uffd6\040\uffd6\045\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\001\002\000\024\004\042\025\uffc0\031\011" +
    "\036\053\040\043\045\035\055\010\056\040\057\044\001" +
    "\002\000\004\025\u010b\001\002\000\020\004\042\034\uffc0" +
    "\036\053\040\043\045\035\056\040\057\044\001\002\000" +
    "\004\034\u010d\001\002\000\010\025\uffd5\037\uffd5\044\uffd5" +
    "\001\002\000\004\025\uffe0\001\002\000\004\025\uffe2\001" +
    "\002\000\004\060\u0112\001\002\000\026\004\ufff9\025\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\044\ufff9\045\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\001\002\000\020\003\u0113\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\001\002\000\004\062" +
    "\u011e\001\002\000\016\011\u0115\012\u0117\013\u011b\014\u0118" +
    "\015\u0116\016\u011a\001\002\000\004\062\ufff4\001\002\000" +
    "\004\062\uffef\001\002\000\004\062\ufff3\001\002\000\004" +
    "\062\ufff1\001\002\000\004\062\u011c\001\002\000\004\062" +
    "\ufff0\001\002\000\004\062\ufff2\001\002\000\026\004\u0110" +
    "\025\ufff5\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\026\004\ufff7\025\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\044\ufff7\045\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\001\002\000\026\004\ufff6\025\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\044\ufff6\045\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\001\002\000\026\004\uffee\025\uffee\031\uffee\036\uffee" +
    "\037\uffee\040\uffee\044\uffee\045\uffee\056\uffee\057\uffee\001" +
    "\002\000\006\063\uffec\065\uffec\001\002\000\006\063\u0122" +
    "\065\uffe7\001\002\000\004\004\u0129\001\002\000\004\065" +
    "\u0124\001\002\000\010\030\032\041\033\050\030\001\002" +
    "\000\004\062\u0126\001\002\000\026\004\uffeb\025\uffeb\031" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\044\uffeb\045\uffeb\056\uffeb" +
    "\057\uffeb\001\002\000\026\004\u0120\025\uffed\031\uffed\036" +
    "\uffed\037\uffed\040\uffed\044\uffed\045\uffed\056\uffed\057\uffed" +
    "\001\002\000\026\004\uffea\025\uffea\031\uffea\036\uffea\037" +
    "\uffea\040\uffea\044\uffea\045\uffea\056\uffea\057\uffea\001\002" +
    "\000\006\063\uffe9\065\uffe9\001\002\000\006\063\u0122\065" +
    "\uffe7\001\002\000\004\065\uffe8\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\005\014" +
    "\011\015\001\001\000\004\006\u011e\001\001\000\004\004" +
    "\u0110\001\001\000\004\035\367\001\001\000\006\005\356" +
    "\011\357\001\001\000\022\016\354\017\036\022\040\023" +
    "\044\025\045\026\051\027\046\030\047\001\001\000\006" +
    "\003\343\011\344\001\001\000\002\001\001\000\004\012" +
    "\020\001\001\000\002\001\001\000\004\011\336\001\001" +
    "\000\002\001\001\000\006\045\024\047\023\001\001\000" +
    "\004\010\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\030\001\001\000\002\001\001\000\004\046" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\054\005\035\015\053\016\050\017\036\022\040\023" +
    "\044\025\045\026\051\027\046\030\047\001\001\000\002" +
    "\001\001\000\024\003\277\016\276\017\036\022\040\023" +
    "\044\025\045\026\051\027\046\030\047\001\001\000\022" +
    "\016\275\017\036\022\040\023\044\025\045\026\051\027" +
    "\046\030\047\001\001\000\004\066\263\001\001\000\022" +
    "\016\262\017\036\022\040\023\044\025\045\026\051\027" +
    "\046\030\047\001\001\000\004\075\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\176\017\036\022" +
    "\040\023\044\025\045\026\051\027\046\030\047\001\001" +
    "\000\022\016\175\017\036\022\040\023\044\025\045\026" +
    "\051\027\046\030\047\001\001\000\022\016\174\017\036" +
    "\022\040\023\044\025\045\026\051\027\046\030\047\001" +
    "\001\000\022\016\173\017\036\022\040\023\044\025\045" +
    "\026\051\027\046\030\047\001\001\000\002\001\001\000" +
    "\022\016\172\017\036\022\040\023\044\025\045\026\051" +
    "\027\046\030\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\055\016\056\017\036\022\040\023\044" +
    "\025\045\026\051\027\046\030\047\001\001\000\022\016" +
    "\057\017\036\022\040\023\044\025\045\026\051\027\046" +
    "\030\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\061\017\036\022\040\023\044\025\045\026\051" +
    "\027\046\030\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\072\026\077\031\100\034\104\001\001\000" +
    "\002\001\001\000\012\024\162\026\077\031\100\034\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\107\026\077\031\100\034" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\113\026\077\031\100\034\104\001" +
    "\001\000\004\073\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\124\001\001\000\012" +
    "\024\127\026\077\031\100\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\130" +
    "\001\001\000\004\014\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\151\001\001\000\012\024\147\026\077\031\100\034" +
    "\104\001\001\000\012\024\145\026\077\031\100\034\104" +
    "\001\001\000\002\001\001\000\004\071\142\001\001\000" +
    "\012\024\143\026\077\031\100\034\104\001\001\000\004" +
    "\032\144\001\001\000\002\001\001\000\004\032\146\001" +
    "\001\000\002\001\001\000\004\032\150\001\001\000\002" +
    "\001\001\000\012\024\152\026\077\031\100\034\104\001" +
    "\001\000\004\032\153\001\001\000\002\001\001\000\012" +
    "\024\155\026\077\031\100\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\160\017\036\022\040" +
    "\023\044\025\045\026\051\027\046\030\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\165\026\077\031\100\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\170" +
    "\017\036\022\040\023\044\025\045\026\051\027\046\030" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\200\026\077\031\100" +
    "\034\104\001\001\000\004\100\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\211\001\001\000\010\020\215\026\214" +
    "\034\217\001\001\000\004\033\252\001\001\000\004\033" +
    "\251\001\001\000\004\033\250\001\001\000\002\001\001" +
    "\000\004\062\233\001\001\000\004\033\232\001\001\000" +
    "\010\020\221\026\214\034\217\001\001\000\002\001\001" +
    "\000\004\033\223\001\001\000\002\001\001\000\004\064" +
    "\230\001\001\000\004\063\226\001\001\000\010\020\227" +
    "\026\214\034\217\001\001\000\002\001\001\000\010\020" +
    "\231\026\214\034\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\234\001\001\000\002\001\001\000" +
    "\004\061\236\001\001\000\002\001\001\000\022\016\240" +
    "\017\036\022\040\023\044\025\045\026\051\027\046\030" +
    "\047\001\001\000\004\021\242\001\001\000\004\065\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\247\017\036\022\040\023\044\025\045\026\051\027\046" +
    "\030\047\001\001\000\022\016\246\017\036\022\040\023" +
    "\044\025\045\026\051\027\046\030\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\256\001\001\000\012\024\257\026\077\031" +
    "\100\034\104\001\001\000\004\077\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\265\026\214\034\217\001\001\000\004" +
    "\067\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\272\017\036\022\040\023\044" +
    "\025\045\026\051\027\046\030\047\001\001\000\004\070" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\300\017\036\022" +
    "\040\023\044\025\045\026\051\027\046\030\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\314\001\001\000\004" +
    "\013\316\001\001\000\004\010\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\321\001\001\000\004" +
    "\051\322\001\001\000\030\003\054\005\035\015\323\016" +
    "\050\017\036\022\040\023\044\025\045\026\051\027\046" +
    "\030\047\001\001\000\002\001\001\000\022\016\325\017" +
    "\036\022\040\023\044\025\045\026\051\027\046\030\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\332\001\001\000\002" +
    "\001\001\000\004\057\334\001\001\000\004\013\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\341\017\036\022\040\023\044\025\045\026" +
    "\051\027\046\030\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\350\001\001\000\002\001\001\000" +
    "\022\016\346\017\036\022\040\023\044\025\045\026\051" +
    "\027\046\030\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\352\017\036\022\040" +
    "\023\044\025\045\026\051\027\046\030\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\363\001\001\000\002\001\001\000" +
    "\022\016\361\017\036\022\040\023\044\025\045\026\051" +
    "\027\046\030\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\365\017\036\022\040" +
    "\023\044\025\045\026\051\027\046\030\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u010e\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\373\054" +
    "\374\001\001\000\002\001\001\000\004\010\375\001\001" +
    "\000\002\001\001\000\004\055\377\001\001\000\004\013" +
    "\u0100\001\001\000\002\001\001\000\004\056\u0102\001\001" +
    "\000\030\003\054\005\035\015\u0103\016\050\017\036\022" +
    "\040\023\044\025\045\026\051\027\046\030\047\001\001" +
    "\000\002\001\001\000\022\016\u0105\017\036\022\040\023" +
    "\044\025\045\026\051\027\046\030\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\u0108\001\001\000" +
    "\030\003\054\005\035\015\u0109\016\050\017\036\022\040" +
    "\023\044\025\045\026\051\027\046\030\047\001\001\000" +
    "\002\001\001\000\022\016\u010b\017\036\022\040\023\044" +
    "\025\045\026\051\027\046\030\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\u0113\001" +
    "\001\000\002\001\001\000\004\040\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u0120\001\001\000\004" +
    "\007\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0124\001\001\000\002\001\001\000\004\043\u0126" +
    "\001\001\000\004\006\u0127\001\001\000\002\001\001\000" +
    "\004\044\u0129\001\001\000\004\007\u012a\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" : "+message);
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);            
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
            //m.append("\n" + "Token: " + s.value);
        }
        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){

      
        try {
              // creando buffered writer 
            BufferedWriter writer = new BufferedWriter(new FileWriter("assembler_code.txt"));
            SemanticActions.setWriter(writer);
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM IDENTIFIER globals constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM IDENTIFIER globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROGRAM IDENTIFIER functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= PROGRAM IDENTIFIER BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.report_error("Error fatal :(", e); 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberConst(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= IDENTIFIER EQUAL NT$0 literal_const SEMI constants_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_body ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error al declarar una constante\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal_const ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal_const ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal_const ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal_const ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal_const ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal_const ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globals_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertVarST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // globals_body ::= IDENTIFIER NT$1 globals_list COLON Type SEMI NT$2 globals_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // globals_list ::= COMMA IDENTIFIER NT$3 globals_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions ::= FUNCTION function_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions ::= PROCEDURE procedure_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functions ::= FUNCTION error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               parser.report_error("Error al declarar la funcion\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // functions ::= PROCEDURE error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    parser.report_error("Error al declarar la funcion\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertFunctionST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_header ::= IDENTIFIER OPEN_PARENTHESIS NT$4 CLOSE_PARENTHESIS COLON Type NT$5 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertFunctionST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_header ::= IDENTIFIER OPEN_PARENTHESIS NT$6 Type IDENTIFIER NT$7 parameter_list CLOSE_PARENTHESIS COLON Type NT$8 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
SemanticActions.insertProcedureST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS NT$9 CLOSE_PARENTHESIS NT$10 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
SemanticActions.insertProcedureST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS NT$11 Type IDENTIFIER NT$12 parameter_list CLOSE_PARENTHESIS NT$13 function_body BEGIN statements END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$14 ::= 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameter_list ::= COMMA Type IDENTIFIER NT$14 parameter_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameter_list ::= COMMA error IDENTIFIER parameter_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    parser.report_error("No especificado el tipo de un parametro\n", e); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_body ::= constants globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_body ::= globals constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_body ::= globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_body ::= constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_body ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statements ::= while_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statements ::= for_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statements ::= fun_call statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statements ::= read statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statements ::= write statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$15 ::= 
            {
              Object RESULT =null;
SemanticActions.startIf(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
SemanticActions.evalIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_statement ::= IF OPEN_PARENTHESIS NT$15 cond CLOSE_PARENTHESIS NT$16 THEN statements else_statement END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVariable(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond ::= IDENTIFIER NT$17 cond2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cond ::= TRUE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cond ::= FALSE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cond ::= literal cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond ::= fun_call cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$18 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond2 ::= BOOLEAN_OPERATOR NT$18 cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$19 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond2 ::= EQUAL NT$19 cond 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$20 ::= 
            {
              Object RESULT =null;
SemanticActions.startElse();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // else_statement ::= ELSE NT$20 statements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		SemanticActions.endIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_statement ::= ELSE BEGIN statements 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                            parser.report_error("Syntax error in line " + eleft + ": El else no lleva BEGIN\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$21 ::= 
            {
              Object RESULT =null;
SemanticActions.startWhile(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
SemanticActions.evalWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
SemanticActions.endWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // while_statement ::= WHILE NT$21 OPEN_PARENTHESIS cond NT$22 CLOSE_PARENTHESIS DO BEGIN statements NT$23 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_statement ::= FOR IDENTIFIER COLON EQUAL exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_statement ::= FOR error TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 parser.report_error("Debe de asignar un valor\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_statement ::= FOR error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en el FOR", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SemanticActions.rememberConst(li.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exp ::= exp1 exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exp1 ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberVariable(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exp1 ::= ARITHMETICOP IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberVariable(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exp1 ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exp1 ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exp1 ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exp1 ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exp1 ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exp1 ::= MINUSOP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exp1 ::= ARITHMETICOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$24 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exp2 ::= BOOLEAN_OPERATOR NT$24 exp exp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$25 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp2 ::= ARITHMETICOP NT$25 exp exp2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp2 ::= EQUAL exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp2 ::= MINUSOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$26 ::= 
            {
              Object RESULT =null;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS exp NT$26 parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // fun_call ::= IDENTIFIER error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en los parentesis al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parameter_list_call ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$27 ::= 
            {
              Object RESULT =null;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parameter_list_call ::= COMMA exp NT$27 parameter_list_call 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$28 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVariable(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberOperator(op.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // assignment ::= IDENTIFIER NT$28 COLON EQUAL NT$29 exp NT$30 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // read ::= READ OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // read ::= READ OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Error en el READ\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$31 ::= 
            {
              Object RESULT =null;
SemanticActions.binaryEvaluation();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // write ::= WRITE OPEN_PARENTHESIS exp NT$31 parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // write ::= WRITE OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Error en el WRITE: se necesita al menos un parametro\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
