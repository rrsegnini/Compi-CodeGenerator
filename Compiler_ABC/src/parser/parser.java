
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import semantic.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\012\000\002\002\004\000\002\002" +
    "\012\000\002\002\011\000\002\002\011\000\002\002\010" +
    "\000\002\002\007\000\002\002\003\000\002\003\004\000" +
    "\002\041\002\000\002\004\010\000\002\004\006\000\002" +
    "\004\002\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\005\004\000\002\006\002\000\002\042\002\000" +
    "\002\043\002\000\002\006\012\000\002\044\002\000\002" +
    "\007\006\000\002\007\002\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\002\000" +
    "\002\012\013\000\002\012\015\000\002\012\014\000\002" +
    "\012\015\000\002\012\015\000\002\035\010\000\002\035" +
    "\013\000\002\035\010\000\002\035\013\000\002\013\006" +
    "\000\002\013\006\000\002\013\002\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\002\000\002\017\012\000" +
    "\002\017\012\000\002\017\011\000\002\017\011\000\002" +
    "\017\013\000\002\020\004\000\002\020\006\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\002\000" +
    "\002\021\004\000\002\021\002\000\002\021\005\000\002" +
    "\022\012\000\002\022\010\000\002\022\012\000\002\022" +
    "\012\000\002\022\011\000\002\022\011\000\002\023\015" +
    "\000\002\023\012\000\002\023\005\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\024\004\000\002\031" +
    "\003\000\002\031\004\000\002\031\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\004\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\002\000\002\032" +
    "\003\000\002\026\010\000\002\026\006\000\002\026\007" +
    "\000\002\026\006\000\002\026\006\000\002\014\002\000" +
    "\002\014\005\000\002\025\007\000\002\025\007\000\002" +
    "\025\005\000\002\027\007\000\002\027\006\000\002\027" +
    "\007\000\002\030\010\000\002\030\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\006\003\005\023\006\001\002\000\004\002" +
    "\u014a\001\002\000\004\002\ufffa\001\002\000\004\004\007" +
    "\001\002\000\014\025\014\031\011\037\017\044\012\055" +
    "\010\001\002\000\030\004\u013e\025\uffed\031\uffed\034\uffed" +
    "\036\uffed\037\uffed\040\uffed\044\uffed\045\uffed\056\uffed\057" +
    "\uffed\001\002\000\030\004\u012e\025\ufff5\034\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\001\002\000\006\003\u0118\004\u0119\001\002\000\012" +
    "\025\uffdf\037\017\044\012\055\010\001\002\000\020\004" +
    "\040\034\uffc6\036\051\040\041\045\033\056\036\057\042" +
    "\001\002\000\012\025\uffdf\031\011\037\017\044\012\001" +
    "\002\000\004\025\u0100\001\002\000\006\003\020\004\022" +
    "\001\002\000\004\034\377\001\002\000\010\025\uffdf\037" +
    "\017\044\012\001\002\000\004\017\023\001\002\000\012" +
    "\020\026\030\027\041\030\050\024\001\002\000\026\004" +
    "\uffe4\025\uffe4\031\uffe4\036\uffe4\040\uffe4\045\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\062\uffe4\001\002\000\004\004\342\001" +
    "\002\000\004\065\031\001\002\000\026\004\uffe5\025\uffe5" +
    "\031\uffe5\036\uffe5\040\uffe5\045\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\062\uffe5\001\002\000\026\004\uffe6\025\uffe6\031\uffe6" +
    "\036\uffe6\040\uffe6\045\uffe6\055\uffe6\056\uffe6\057\uffe6\062" +
    "\uffe6\001\002\000\010\030\027\041\030\050\024\001\002" +
    "\000\024\004\040\025\uffc6\031\011\036\051\040\041\045" +
    "\033\055\010\056\036\057\042\001\002\000\004\017\331" +
    "\001\002\000\024\004\040\025\uffc6\031\011\034\uffc6\036" +
    "\051\040\041\045\033\056\036\057\042\001\002\000\024" +
    "\004\040\025\uffc6\033\uffc6\034\uffc6\036\051\040\041\045" +
    "\033\056\036\057\042\001\002\000\006\003\272\017\273" +
    "\001\002\000\024\004\040\025\uffc6\033\uffc6\034\uffc6\036" +
    "\051\040\041\045\033\056\036\057\042\001\002\000\010" +
    "\003\261\017\111\065\262\001\002\000\006\003\202\017" +
    "\203\001\002\000\004\017\172\001\002\000\024\004\040" +
    "\025\uffc6\033\uffc6\034\uffc6\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\024\004\040\025\uffc6\033\uffc6" +
    "\034\uffc6\036\051\040\041\045\033\056\036\057\042\001" +
    "\002\000\024\004\040\025\uffc6\033\uffc6\034\uffc6\036\051" +
    "\040\041\045\033\056\036\057\042\001\002\000\024\004" +
    "\040\025\uffc6\033\uffc6\034\uffc6\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\006\025\uffce\034\uffce\001" +
    "\002\000\024\004\040\025\uffc6\033\uffc6\034\uffc6\036\051" +
    "\040\041\045\033\056\036\057\042\001\002\000\006\003" +
    "\062\004\063\001\002\000\004\025\057\001\002\000\024" +
    "\004\040\025\uffc6\034\uffc6\036\051\040\041\045\033\055" +
    "\010\056\036\057\042\001\002\000\022\004\040\025\uffc6" +
    "\034\uffc6\036\051\040\041\045\033\056\036\057\042\001" +
    "\002\000\006\025\uffcf\034\uffcf\001\002\000\006\025\uffd2" +
    "\034\uffd2\001\002\000\020\004\040\034\uffc6\036\051\040" +
    "\041\045\033\056\036\057\042\001\002\000\004\034\061" +
    "\001\002\000\010\025\uffde\037\uffde\044\uffde\001\002\000" +
    "\006\034\157\052\156\001\002\000\004\065\064\001\002" +
    "\000\004\060\065\001\002\000\032\004\102\007\100\011" +
    "\070\012\074\013\066\014\073\015\103\016\101\017\105" +
    "\035\075\053\071\064\067\001\002\000\024\005\uffa9\007" +
    "\uffa9\020\uffa9\032\uffa9\052\uffa9\060\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\001\002\000\032\004\102\007\100\011\070\012" +
    "\074\013\066\014\073\015\103\016\101\017\105\035\075" +
    "\053\071\064\067\001\002\000\024\005\uffab\007\uffab\020" +
    "\uffab\032\uffab\052\uffab\060\uffab\062\uffab\063\uffab\064\uffab" +
    "\001\002\000\024\005\uffa1\007\uffa1\020\uffa1\032\uffa1\052" +
    "\uffa1\060\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000\004" +
    "\052\147\001\002\000\024\005\uffa8\007\uffa8\020\uffa8\032" +
    "\uffa8\052\uffa8\060\uffa8\062\uffa8\063\uffa8\064\uffa8\001\002" +
    "\000\024\005\uffaa\007\uffaa\020\uffaa\032\uffaa\052\uffaa\060" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\024\005\uffa0" +
    "\007\uffa0\020\uffa0\032\uffa0\052\uffa0\060\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\001\002\000\024\005\uff9e\007\uff9e\020\uff9e" +
    "\032\uff9e\052\uff9e\060\uff9e\062\uff9e\063\uff9e\064\uff9e\001" +
    "\002\000\024\005\136\007\132\020\uff98\032\uff98\052\uff98" +
    "\060\134\062\uff98\063\uff98\064\133\001\002\000\004\004" +
    "\131\001\002\000\024\005\uffa7\007\uffa7\020\uffa7\032\uffa7" +
    "\052\uffa7\060\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000" +
    "\030\003\110\005\uffa4\007\uffa4\017\111\020\uffa4\032\uffa4" +
    "\052\uffa4\060\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002\000" +
    "\024\005\uffa6\007\uffa6\020\uffa6\032\uffa6\052\uffa6\060\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\001\002\000\024\005\uff9f\007" +
    "\uff9f\020\uff9f\032\uff9f\052\uff9f\060\uff9f\062\uff9f\063\uff9f" +
    "\064\uff9f\001\002\000\032\004\102\007\100\011\070\012" +
    "\074\013\066\014\073\015\103\016\101\017\105\035\075" +
    "\053\071\064\067\001\002\000\004\020\107\001\002\000" +
    "\024\005\uffa2\007\uffa2\020\uffa2\032\uffa2\052\uffa2\060\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\001\002\000\004\020\127\001" +
    "\002\000\036\003\113\004\102\007\100\011\070\012\074" +
    "\013\066\014\073\015\103\016\101\017\105\020\114\035" +
    "\075\053\071\064\067\001\002\000\006\020\uff91\063\121" +
    "\001\002\000\006\020\117\062\116\001\002\000\004\062" +
    "\115\001\002\000\046\004\uff95\005\uff95\007\uff95\020\uff95" +
    "\025\uff95\032\uff95\033\uff95\034\uff95\036\uff95\040\uff95\045" +
    "\uff95\052\uff95\056\uff95\057\uff95\060\uff95\062\uff95\063\uff95" +
    "\064\uff95\001\002\000\046\004\uff92\005\uff92\007\uff92\020" +
    "\uff92\025\uff92\032\uff92\033\uff92\034\uff92\036\uff92\040\uff92" +
    "\045\uff92\052\uff92\056\uff92\057\uff92\060\uff92\062\uff92\063" +
    "\uff92\064\uff92\001\002\000\004\062\120\001\002\000\046" +
    "\004\uff94\005\uff94\007\uff94\020\uff94\025\uff94\032\uff94\033" +
    "\uff94\034\uff94\036\uff94\040\uff94\045\uff94\052\uff94\056\uff94" +
    "\057\uff94\060\uff94\062\uff94\063\uff94\064\uff94\001\002\000" +
    "\032\004\102\007\100\011\070\012\074\013\066\014\073" +
    "\015\103\016\101\017\105\035\075\053\071\064\067\001" +
    "\002\000\004\020\123\001\002\000\004\062\124\001\002" +
    "\000\046\004\uff96\005\uff96\007\uff96\020\uff96\025\uff96\032" +
    "\uff96\033\uff96\034\uff96\036\uff96\040\uff96\045\uff96\052\uff96" +
    "\056\uff96\057\uff96\060\uff96\062\uff96\063\uff96\064\uff96\001" +
    "\002\000\006\020\uff91\063\121\001\002\000\004\020\uff90" +
    "\001\002\000\004\062\130\001\002\000\046\004\uff93\005" +
    "\uff93\007\uff93\020\uff93\025\uff93\032\uff93\033\uff93\034\uff93" +
    "\036\uff93\040\uff93\045\uff93\052\uff93\056\uff93\057\uff93\060" +
    "\uff93\062\uff93\063\uff93\064\uff93\001\002\000\024\005\uffa3" +
    "\007\uffa3\020\uffa3\032\uffa3\052\uffa3\060\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\001\002\000\050\004\102\005\uff97\007\uff97" +
    "\011\070\012\074\013\066\014\073\015\103\016\101\017" +
    "\105\020\uff97\032\uff97\035\075\052\uff97\053\071\060\uff97" +
    "\062\uff97\063\uff97\064\uff97\001\002\000\032\004\102\007" +
    "\100\011\070\012\074\013\066\014\073\015\103\016\101" +
    "\017\105\035\075\053\071\064\067\001\002\000\032\004" +
    "\102\007\100\011\070\012\074\013\066\014\073\015\103" +
    "\016\101\017\105\035\075\053\071\064\067\001\002\000" +
    "\024\005\uffa5\007\uffa5\020\uffa5\032\uffa5\052\uffa5\060\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\001\002\000\032\004\102\007" +
    "\100\011\070\012\074\013\066\014\073\015\103\016\101" +
    "\017\105\035\075\053\071\064\067\001\002\000\024\005" +
    "\136\007\132\020\uff98\032\uff98\052\uff98\060\134\062\uff98" +
    "\063\uff98\064\133\001\002\000\024\005\uff9c\007\uff9c\020" +
    "\uff9c\032\uff9c\052\uff9c\060\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\001\002\000\024\005\136\007\132\020\uff98\032\uff98\052" +
    "\uff98\060\134\062\uff98\063\uff98\064\133\001\002\000\024" +
    "\005\uff9a\007\uff9a\020\uff9a\032\uff9a\052\uff9a\060\uff9a\062" +
    "\uff9a\063\uff9a\064\uff9a\001\002\000\024\005\136\007\132" +
    "\020\uff98\032\uff98\052\uff98\060\134\062\uff98\063\uff98\064" +
    "\133\001\002\000\024\005\uff99\007\uff99\020\uff99\032\uff99" +
    "\052\uff99\060\uff99\062\uff99\063\uff99\064\uff99\001\002\000" +
    "\024\005\136\007\132\020\uff98\032\uff98\052\uff98\060\134" +
    "\062\uff98\063\uff98\064\133\001\002\000\024\005\uff9b\007" +
    "\uff9b\020\uff9b\032\uff9b\052\uff9b\060\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\001\002\000\032\004\102\007\100\011\070\012" +
    "\074\013\066\014\073\015\103\016\101\017\105\035\075" +
    "\053\071\064\067\001\002\000\004\032\151\001\002\000" +
    "\004\025\152\001\002\000\020\004\040\034\uffc6\036\051" +
    "\040\041\045\033\056\036\057\042\001\002\000\004\034" +
    "\154\001\002\000\024\004\uffae\025\uffae\033\uffae\034\uffae" +
    "\036\uffae\040\uffae\045\uffae\056\uffae\057\uffae\001\002\000" +
    "\024\005\uff9d\007\uff9d\020\uff9d\032\uff9d\052\uff9d\060\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\001\002\000\032\004\102\007" +
    "\100\011\070\012\074\013\066\014\073\015\103\016\101" +
    "\017\105\035\075\053\071\064\067\001\002\000\024\004" +
    "\uffac\025\uffac\033\uffac\034\uffac\036\uffac\040\uffac\045\uffac" +
    "\056\uffac\057\uffac\001\002\000\004\032\161\001\002\000" +
    "\004\025\162\001\002\000\020\004\040\034\uffc6\036\051" +
    "\040\041\045\033\056\036\057\042\001\002\000\004\034" +
    "\164\001\002\000\024\004\uffad\025\uffad\033\uffad\034\uffad" +
    "\036\uffad\040\uffad\045\uffad\056\uffad\057\uffad\001\002\000" +
    "\010\025\uffc9\033\uffc9\034\uffc9\001\002\000\010\025\uffc7" +
    "\033\uffc7\034\uffc7\001\002\000\010\025\uffc8\033\uffc8\034" +
    "\uffc8\001\002\000\010\025\uffca\033\uffca\034\uffca\001\002" +
    "\000\010\025\uffcb\033\uffcb\034\uffcb\001\002\000\034\003" +
    "\174\004\102\007\100\011\070\012\074\013\066\014\073" +
    "\015\103\016\101\017\105\035\075\053\071\064\067\001" +
    "\002\000\006\020\uff91\063\121\001\002\000\004\020\175" +
    "\001\002\000\004\062\176\001\002\000\024\004\uff88\025" +
    "\uff88\033\uff88\034\uff88\036\uff88\040\uff88\045\uff88\056\uff88" +
    "\057\uff88\001\002\000\004\020\200\001\002\000\004\062" +
    "\201\001\002\000\024\004\uff89\025\uff89\033\uff89\034\uff89" +
    "\036\uff89\040\uff89\045\uff89\056\uff89\057\uff89\001\002\000" +
    "\004\020\254\001\002\000\030\003\207\004\211\011\070" +
    "\012\074\013\066\014\073\015\103\016\101\017\213\035" +
    "\205\053\204\001\002\000\010\005\220\020\uffb8\060\217" +
    "\001\002\000\010\005\220\020\uffb8\060\217\001\002\000" +
    "\010\005\220\020\uffb8\060\217\001\002\000\004\020\244" +
    "\001\002\000\004\020\225\001\002\000\014\003\110\005" +
    "\220\017\111\020\uffb8\060\217\001\002\000\010\005\220" +
    "\020\uffb8\060\217\001\002\000\026\004\211\011\070\012" +
    "\074\013\066\014\073\015\103\016\101\017\213\035\205" +
    "\053\204\001\002\000\004\020\215\001\002\000\010\005" +
    "\220\020\uffb8\060\217\001\002\000\004\020\uffbf\001\002" +
    "\000\026\004\211\011\070\012\074\013\066\014\073\015" +
    "\103\016\101\017\213\035\205\053\204\001\002\000\026" +
    "\004\211\011\070\012\074\013\066\014\073\015\103\016" +
    "\101\017\213\035\205\053\204\001\002\000\004\020\uffba" +
    "\001\002\000\004\020\uffb9\001\002\000\004\020\uffbc\001" +
    "\002\000\004\020\uffc0\001\002\000\004\051\226\001\002" +
    "\000\026\003\230\004\040\025\231\033\uffc6\034\uffc6\036" +
    "\051\040\041\045\033\056\036\057\042\001\002\000\006" +
    "\033\233\034\uffb6\001\002\000\004\034\241\001\002\000" +
    "\022\004\040\033\uffc6\034\uffc6\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\006\033\233\034\uffb6\001" +
    "\002\000\022\004\040\025\237\034\uffc6\036\051\040\041" +
    "\045\033\056\036\057\042\001\002\000\004\034\235\001" +
    "\002\000\024\004\uffc1\025\uffc1\033\uffc1\034\uffc1\036\uffc1" +
    "\040\uffc1\045\uffc1\056\uffc1\057\uffc1\001\002\000\004\034" +
    "\uffb7\001\002\000\020\004\040\034\uffc6\036\051\040\041" +
    "\045\033\056\036\057\042\001\002\000\004\034\uffb5\001" +
    "\002\000\024\004\uffc2\025\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\040\uffc2\045\uffc2\056\uffc2\057\uffc2\001\002\000\004\034" +
    "\243\001\002\000\024\004\uffc5\025\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\040\uffc5\045\uffc5\056\uffc5\057\uffc5\001\002\000" +
    "\004\051\245\001\002\000\022\004\040\033\uffc6\034\uffc6" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\006\033\233\034\uffb6\001\002\000\004\034\250\001\002" +
    "\000\024\004\uffc4\025\uffc4\033\uffc4\034\uffc4\036\uffc4\040" +
    "\uffc4\045\uffc4\056\uffc4\057\uffc4\001\002\000\004\020\uffbb" +
    "\001\002\000\004\020\uffbd\001\002\000\004\020\uffbe\001" +
    "\002\000\004\051\255\001\002\000\022\004\040\033\uffc6" +
    "\034\uffc6\036\051\040\041\045\033\056\036\057\042\001" +
    "\002\000\006\033\233\034\uffb6\001\002\000\004\034\260" +
    "\001\002\000\024\004\uffc3\025\uffc3\033\uffc3\034\uffc3\036" +
    "\uffc3\040\uffc3\045\uffc3\056\uffc3\057\uffc3\001\002\000\006" +
    "\020\127\062\270\001\002\000\004\060\263\001\002\000" +
    "\034\003\265\004\102\007\100\011\070\012\074\013\066" +
    "\014\073\015\103\016\101\017\105\035\075\053\071\064" +
    "\067\001\002\000\004\062\267\001\002\000\004\062\266" +
    "\001\002\000\024\004\uff8e\025\uff8e\033\uff8e\034\uff8e\036" +
    "\uff8e\040\uff8e\045\uff8e\056\uff8e\057\uff8e\001\002\000\024" +
    "\004\uff8f\025\uff8f\033\uff8f\034\uff8f\036\uff8f\040\uff8f\045" +
    "\uff8f\056\uff8f\057\uff8f\001\002\000\024\004\uff8d\025\uff8d" +
    "\033\uff8d\034\uff8d\036\uff8d\040\uff8d\045\uff8d\056\uff8d\057" +
    "\uff8d\001\002\000\010\025\uffcc\033\uffcc\034\uffcc\001\002" +
    "\000\006\020\315\032\314\001\002\000\030\003\274\004" +
    "\211\011\070\012\074\013\066\014\073\015\103\016\101" +
    "\017\213\035\205\053\204\001\002\000\004\020\307\001" +
    "\002\000\004\020\276\001\002\000\004\032\277\001\002" +
    "\000\006\003\300\025\301\001\002\000\004\034\306\001" +
    "\002\000\022\003\303\004\040\034\uffc6\036\051\040\041" +
    "\045\033\056\036\057\042\001\002\000\004\034\305\001" +
    "\002\000\004\034\304\001\002\000\024\004\uffb1\025\uffb1" +
    "\033\uffb1\034\uffb1\036\uffb1\040\uffb1\045\uffb1\056\uffb1\057" +
    "\uffb1\001\002\000\024\004\uffb4\025\uffb4\033\uffb4\034\uffb4" +
    "\036\uffb4\040\uffb4\045\uffb4\056\uffb4\057\uffb4\001\002\000" +
    "\024\004\uffb0\025\uffb0\033\uffb0\034\uffb0\036\uffb0\040\uffb0" +
    "\045\uffb0\056\uffb0\057\uffb0\001\002\000\004\032\310\001" +
    "\002\000\004\025\311\001\002\000\020\004\040\034\uffc6" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\004\034\313\001\002\000\024\004\uffb2\025\uffb2\033\uffb2" +
    "\034\uffb2\036\uffb2\040\uffb2\045\uffb2\056\uffb2\057\uffb2\001" +
    "\002\000\004\025\322\001\002\000\004\032\316\001\002" +
    "\000\004\025\317\001\002\000\020\004\040\034\uffc6\036" +
    "\051\040\041\045\033\056\036\057\042\001\002\000\004" +
    "\034\321\001\002\000\024\004\uffaf\025\uffaf\033\uffaf\034" +
    "\uffaf\036\uffaf\040\uffaf\045\uffaf\056\uffaf\057\uffaf\001\002" +
    "\000\020\004\040\034\uffc6\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\004\034\324\001\002\000\024" +
    "\004\uffb3\025\uffb3\033\uffb3\034\uffb3\036\uffb3\040\uffb3\045" +
    "\uffb3\056\uffb3\057\uffb3\001\002\000\010\025\uffcd\033\uffcd" +
    "\034\uffcd\001\002\000\006\025\uffd0\034\uffd0\001\002\000" +
    "\022\004\040\025\uffc6\034\uffc6\036\051\040\041\045\033" +
    "\056\036\057\042\001\002\000\006\025\uffd1\034\uffd1\001" +
    "\002\000\010\003\332\004\334\020\333\001\002\000\004" +
    "\020\340\001\002\000\004\062\337\001\002\000\004\020" +
    "\335\001\002\000\004\062\336\001\002\000\024\004\uff8c" +
    "\025\uff8c\033\uff8c\034\uff8c\036\uff8c\040\uff8c\045\uff8c\056" +
    "\uff8c\057\uff8c\001\002\000\024\004\uff8b\025\uff8b\033\uff8b" +
    "\034\uff8b\036\uff8b\040\uff8b\045\uff8b\056\uff8b\057\uff8b\001" +
    "\002\000\004\062\341\001\002\000\024\004\uff8a\025\uff8a" +
    "\033\uff8a\034\uff8a\036\uff8a\040\uff8a\045\uff8a\056\uff8a\057" +
    "\uff8a\001\002\000\010\003\344\020\uffd3\063\343\001\002" +
    "\000\012\003\371\030\027\041\030\050\024\001\002\000" +
    "\004\020\362\001\002\000\004\020\346\001\002\000\006" +
    "\003\347\065\350\001\002\000\004\025\357\001\002\000" +
    "\010\030\027\041\030\050\024\001\002\000\004\025\352" +
    "\001\002\000\026\003\353\004\040\031\011\034\uffc6\036" +
    "\051\040\041\045\033\055\010\056\036\057\042\001\002" +
    "\000\004\034\356\001\002\000\004\034\355\001\002\000" +
    "\010\025\uffdd\037\uffdd\044\uffdd\001\002\000\010\025\uffda" +
    "\037\uffda\044\uffda\001\002\000\024\004\040\031\011\034" +
    "\uffc6\036\051\040\041\045\033\055\010\056\036\057\042" +
    "\001\002\000\004\034\361\001\002\000\010\025\uffdc\037" +
    "\uffdc\044\uffdc\001\002\000\004\065\363\001\002\000\010" +
    "\030\027\041\030\050\024\001\002\000\004\025\365\001" +
    "\002\000\024\004\040\031\011\034\uffc6\036\051\040\041" +
    "\045\033\055\010\056\036\057\042\001\002\000\004\034" +
    "\367\001\002\000\010\025\uffdb\037\uffdb\044\uffdb\001\002" +
    "\000\004\004\374\001\002\000\004\004\372\001\002\000" +
    "\006\020\uffd3\063\343\001\002\000\004\020\uffd4\001\002" +
    "\000\006\020\uffd3\063\343\001\002\000\004\020\uffd5\001" +
    "\002\000\004\025\uffe3\001\002\000\004\025\uffe1\001\002" +
    "\000\020\004\040\034\uffc6\036\051\040\041\045\033\056" +
    "\036\057\042\001\002\000\004\034\u0102\001\002\000\004" +
    "\002\ufffc\001\002\000\010\025\uffdf\037\017\044\012\001" +
    "\002\000\004\025\u0105\001\002\000\020\004\040\034\uffc6" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\004\034\u0107\001\002\000\004\002\ufffd\001\002\000\004" +
    "\025\u0109\001\002\000\020\004\040\034\uffc6\036\051\040" +
    "\041\045\033\056\036\057\042\001\002\000\004\034\u010b" +
    "\001\002\000\004\002\uffff\001\002\000\004\034\u010d\001" +
    "\002\000\004\002\ufffb\001\002\000\010\025\uffdf\037\017" +
    "\044\012\001\002\000\004\025\u0110\001\002\000\020\004" +
    "\040\034\uffc6\036\051\040\041\045\033\056\036\057\042" +
    "\001\002\000\004\034\u0112\001\002\000\004\002\ufffe\001" +
    "\002\000\004\025\u0114\001\002\000\020\004\040\034\uffc6" +
    "\036\051\040\041\045\033\056\036\057\042\001\002\000" +
    "\004\034\u0116\001\002\000\004\002\001\001\002\000\010" +
    "\025\uffdf\037\017\044\012\001\002\000\004\034\u012c\001" +
    "\002\000\004\017\u011a\001\002\000\014\003\u011c\020\u011d" +
    "\030\027\041\030\050\024\001\002\000\004\004\u0124\001" +
    "\002\000\004\025\u0121\001\002\000\004\025\u011e\001\002" +
    "\000\024\004\040\031\011\034\uffc6\036\051\040\041\045" +
    "\033\055\010\056\036\057\042\001\002\000\004\034\u0120" +
    "\001\002\000\010\025\uffd9\037\uffd9\044\uffd9\001\002\000" +
    "\024\004\040\031\011\034\uffc6\036\051\040\041\045\033" +
    "\055\010\056\036\057\042\001\002\000\004\034\u0123\001" +
    "\002\000\010\025\uffd7\037\uffd7\044\uffd7\001\002\000\006" +
    "\020\uffd3\063\343\001\002\000\004\020\u0126\001\002\000" +
    "\004\025\u0127\001\002\000\026\003\u0128\004\040\031\011" +
    "\034\uffc6\036\051\040\041\045\033\055\010\056\036\057" +
    "\042\001\002\000\004\034\u012b\001\002\000\004\034\u012a" +
    "\001\002\000\010\025\uffd8\037\uffd8\044\uffd8\001\002\000" +
    "\010\025\uffd6\037\uffd6\044\uffd6\001\002\000\004\025\uffe0" +
    "\001\002\000\004\025\uffe2\001\002\000\004\060\u0130\001" +
    "\002\000\030\004\ufff9\025\ufff9\034\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\044\ufff9\045\ufff9\055\ufff9\056\ufff9\057\ufff9\001" +
    "\002\000\020\003\u0131\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\001\002\000\004\062\u013c\001\002\000" +
    "\016\011\u0133\012\u0135\013\u0139\014\u0136\015\u0134\016\u0138" +
    "\001\002\000\004\062\ufff4\001\002\000\004\062\uffef\001" +
    "\002\000\004\062\ufff3\001\002\000\004\062\ufff1\001\002" +
    "\000\004\062\u013a\001\002\000\004\062\ufff0\001\002\000" +
    "\004\062\ufff2\001\002\000\030\004\u012e\025\ufff5\034\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\044\ufff5\045\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\001\002\000\030\004\ufff7\025\ufff7\034\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\044\ufff7\045\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\001\002\000\030\004\ufff6\025\ufff6\034\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\044\ufff6\045\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\001\002\000\030\004\uffee\025\uffee\031\uffee" +
    "\034\uffee\036\uffee\037\uffee\040\uffee\044\uffee\045\uffee\056" +
    "\uffee\057\uffee\001\002\000\006\063\uffec\065\uffec\001\002" +
    "\000\006\063\u0140\065\uffe7\001\002\000\004\004\u0147\001" +
    "\002\000\004\065\u0142\001\002\000\010\030\027\041\030" +
    "\050\024\001\002\000\004\062\u0144\001\002\000\030\004" +
    "\uffeb\025\uffeb\031\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\044\uffeb\045\uffeb\056\uffeb\057\uffeb\001\002\000\030\004" +
    "\u013e\025\uffed\031\uffed\034\uffed\036\uffed\037\uffed\040\uffed" +
    "\044\uffed\045\uffed\056\uffed\057\uffed\001\002\000\030\004" +
    "\uffea\025\uffea\031\uffea\034\uffea\036\uffea\037\uffea\040\uffea" +
    "\044\uffea\045\uffea\056\uffea\057\uffea\001\002\000\006\063" +
    "\uffe9\065\uffe9\001\002\000\006\063\u0140\065\uffe7\001\002" +
    "\000\004\065\uffe8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\005\014" +
    "\011\015\001\001\000\004\006\u013c\001\001\000\004\004" +
    "\u012e\001\001\000\004\035\u0116\001\001\000\006\005\u010d" +
    "\011\u010e\001\001\000\022\016\u010b\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\006" +
    "\003\u0102\011\u0103\001\001\000\002\001\001\000\004\012" +
    "\020\001\001\000\002\001\001\000\004\011\375\001\001" +
    "\000\002\001\001\000\004\010\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\031\001\001\000\030\003" +
    "\052\005\033\015\051\016\046\017\034\022\036\023\042" +
    "\025\043\026\047\027\044\030\045\001\001\000\002\001" +
    "\001\000\024\003\326\016\325\017\034\022\036\023\042" +
    "\025\043\026\047\027\044\030\045\001\001\000\022\016" +
    "\324\017\034\022\036\023\042\025\043\026\047\027\044" +
    "\030\045\001\001\000\002\001\001\000\022\016\270\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\170\017\034\022\036\023\042\025\043" +
    "\026\047\027\044\030\045\001\001\000\022\016\167\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\022\016\166\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\022\016\165" +
    "\017\034\022\036\023\042\025\043\026\047\027\044\030" +
    "\045\001\001\000\002\001\001\000\022\016\164\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\053" +
    "\016\054\017\034\022\036\023\042\025\043\026\047\027" +
    "\044\030\045\001\001\000\022\016\055\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\057\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\071\026" +
    "\075\031\076\034\103\001\001\000\002\001\001\000\012" +
    "\024\154\026\075\031\076\034\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\105\026\075\031\076\034\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\111\026\075\031\076\034\103\001\001\000\004\014\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\124\026\075\031\076\034\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\144\026\075" +
    "\031\076\034\103\001\001\000\012\024\142\026\075\031" +
    "\076\034\103\001\001\000\012\024\140\026\075\031\076" +
    "\034\103\001\001\000\002\001\001\000\012\024\136\026" +
    "\075\031\076\034\103\001\001\000\004\032\137\001\001" +
    "\000\002\001\001\000\004\032\141\001\001\000\002\001" +
    "\001\000\004\032\143\001\001\000\002\001\001\000\004" +
    "\032\145\001\001\000\002\001\001\000\012\024\147\026" +
    "\075\031\076\034\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\152\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\157\026" +
    "\075\031\076\034\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\162\017\034\022" +
    "\036\023\042\025\043\026\047\027\044\030\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\172\026\075\031\076\034\103\001" +
    "\001\000\004\014\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\207" +
    "\026\205\034\211\001\001\000\004\033\252\001\001\000" +
    "\004\033\251\001\001\000\004\033\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\223\001\001\000" +
    "\004\033\222\001\001\000\010\020\213\026\205\034\211" +
    "\001\001\000\002\001\001\000\004\033\215\001\001\000" +
    "\002\001\001\000\010\020\221\026\205\034\211\001\001" +
    "\000\010\020\220\026\205\034\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\226\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\004" +
    "\021\241\001\001\000\002\001\001\000\022\016\231\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\004\021\233\001\001\000\022\016\235\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\237\017\034\022\036\023\042\025\043" +
    "\026\047\027\044\030\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\245\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\004\021\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\255\017\034\022\036\023\042\025\043\026" +
    "\047\027\044\030\045\001\001\000\004\021\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\263\026\075\031\076\034\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\274\026\205\034\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\301\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\311\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\317\017\034\022\036" +
    "\023\042\025\043\026\047\027\044\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\322\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\327\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\344\001\001\000\004\010\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\350\001\001\000\002\001\001\000\030" +
    "\003\052\005\033\015\353\016\046\017\034\022\036\023" +
    "\042\025\043\026\047\027\044\030\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\052\005\033\015\357\016\046\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\363\001\001\000\002\001\001\000\030\003" +
    "\052\005\033\015\365\016\046\017\034\022\036\023\042" +
    "\025\043\026\047\027\044\030\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\372\001\001\000\002\001\001\000\004\013" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\u0100\017\034\022\036\023\042\025" +
    "\043\026\047\027\044\030\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u0107\001\001\000\002\001" +
    "\001\000\022\016\u0105\017\034\022\036\023\042\025\043" +
    "\026\047\027\044\030\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\u0109\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u0112\001\001\000\002\001" +
    "\001\000\022\016\u0110\017\034\022\036\023\042\025\043" +
    "\026\047\027\044\030\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\u0114\017\034" +
    "\022\036\023\042\025\043\026\047\027\044\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u011a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\052\005\033\015\u011e\016\046\017" +
    "\034\022\036\023\042\025\043\026\047\027\044\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\052\005\033\015\u0121\016\046\017\034\022\036\023\042" +
    "\025\043\026\047\027\044\030\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0124\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\052\005\033\015" +
    "\u0128\016\046\017\034\022\036\023\042\025\043\026\047" +
    "\027\044\030\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\u0131\001\001\000\002\001\001\000\004\040\u0136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u013a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\u013e" +
    "\001\001\000\004\007\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0142\001\001\000\002\001\001" +
    "\000\004\043\u0144\001\001\000\004\006\u0145\001\001\000" +
    "\002\001\001\000\004\044\u0147\001\001\000\004\007\u0148" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" : "+message);
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);            
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
            //m.append("\n" + "Token: " + s.value);
        }
        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM IDENTIFIER globals constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER constants functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM IDENTIFIER globals functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROGRAM IDENTIFIER functions BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= PROGRAM IDENTIFIER BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.report_error("Error fatal :(", e); 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants ::= CONST constants_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
SemanticActions.rememberConst(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constants_body ::= IDENTIFIER EQUAL NT$0 literal_const SEMI constants_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constants_body ::= IDENTIFIER EQUAL error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error al declarar una constante\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constants_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constants_body",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal_const ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literal_const ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal_const ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal_const ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal_const ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal_const ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.insertConstTS(li.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // globals ::= VAR globals_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // globals_body ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
SemanticActions.insertVarST();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // globals_body ::= IDENTIFIER NT$1 globals_list COLON Type SEMI NT$2 globals_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
SemanticActions.rememberVar(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // globals_list ::= COMMA IDENTIFIER NT$3 globals_list 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // globals_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globals_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		SemanticActions.rememberType(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functions ::= FUNCTION function_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // functions ::= PROCEDURE procedure_header functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functions ::= FUNCTION error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               parser.report_error("Error al declarar la funcion\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // functions ::= PROCEDURE error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    parser.report_error("Error al declarar la funcion\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS COLON Type function_body BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS error BEGIN function_body END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        parser.report_error("Tipo de retorno no especificado en la funcion\n", e); 
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER error CLOSE_PARENTHESIS COLON Type BEGIN function_body END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                        parser.report_error("Error en los argumentos de la funcion\n", e); 
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS COLON Type BEGIN error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        parser.report_error("Error en el cuerpo de la funcion\n", e); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS error BEGIN function_body END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        parser.report_error("Error en los argumentos de la procedimiento\n", e); 
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procedure_header ::= IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        parser.report_error("Error en el cuerpo de la procedimiento\n", e); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter_list ::= COMMA Type IDENTIFIER parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter_list ::= COMMA error IDENTIFIER parameter_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    parser.report_error("No especificado el tipo de un parametro\n", e); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_body ::= constants globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_body ::= globals constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_body ::= globals statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_body ::= constants statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_body ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statements ::= if_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statements ::= while_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statements ::= for_statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statements ::= assignment statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statements ::= fun_call statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statements ::= read statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statements ::= write statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_statement ::= IF OPEN_PARENTHESIS error CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                               parser.report_error("Error en la condicion IF\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_statement ::= IF error CLOSE_PARENTHESIS THEN statements else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                               parser.report_error("Error en la condicion IF, falta parentesis\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               parser.report_error("Syntax error en la condicion IF, falta parentesis\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN BEGIN statements else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                               parser.report_error("Syntax error in line " + eleft + ": El if no lleva BEGIN\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond ::= IDENTIFIER cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond ::= OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond ::= TRUE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond ::= FALSE cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond ::= literal cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond ::= fun_call cond2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond2 ::= BOOLEAN_OPERATOR cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cond2 ::= EQUAL cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cond2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // else_statement ::= ELSE statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_statement ::= ELSE BEGIN statements 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                               parser.report_error("Syntax error in line " + eleft + ": El else no lleva BEGIN\n", e); 
                                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // while_statement ::= WHILE error DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                                                           parser.report_error("Error en la condicion en WHILE\n", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while_statement ::= WHILE OPEN_PARENTHESIS error CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                           parser.report_error("Error en la condicion en WHILE\n", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                           parser.report_error("Error en statements en WHILE\n", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                           parser.report_error("Error en WHILE\n", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while_statement ::= WHILE error CLOSE_PARENTHESIS DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                                                           parser.report_error("Error en la condicion en WHILE, falta parentesis\n", e); 
                                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_statement ::= FOR IDENTIFIER COLON EQUAL exp TO exp DO BEGIN statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_statement ::= FOR error TO exp DO BEGIN statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 parser.report_error("Debe de asignar un valor\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_statement ::= FOR error END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en el FOR", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= FLOATING_POINT_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= INTEGER_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= SCIENTIFIC_NOTATION_NUMERIC_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= NUMERIC_CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(li);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp ::= exp1 exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp1 ::= ARITHMETICOP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp1 ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp1 ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp1 ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exp1 ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exp1 ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exp1 ::= MINUSOP exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exp2 ::= BOOLEAN_OPERATOR exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exp2 ::= ARITHMETICOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exp2 ::= EQUAL exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exp2 ::= MINUSOP exp exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exp2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exp2 ::= ARITHMETICOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // fun_call ::= IDENTIFIER error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Error en los parametros al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // fun_call ::= IDENTIFIER OPEN_PARENTHESIS error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Error en los parentesis al llamar la funcion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parameter_list_call ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parameter_list_call ::= COMMA exp parameter_list_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // assignment ::= IDENTIFIER COLON EQUAL exp SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignment ::= IDENTIFIER COLON EQUAL error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    parser.report_error("Error en la asignacion\n", e); 
                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // assignment ::= IDENTIFIER error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Error en la asignacion\n", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // read ::= READ OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // read ::= READ OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // read ::= READ OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Error en el READ\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // write ::= WRITE OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // write ::= WRITE OPEN_PARENTHESIS error CLOSE_PARENTHESIS SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Error en el WRITE: se necesita al menos un parametro\n", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
