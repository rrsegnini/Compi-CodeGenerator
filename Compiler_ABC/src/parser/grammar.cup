package parser;
import semantic.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;

   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        m.append(" : "+message);
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);            
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
            //m.append("\n" + "Token: " + s.value);
        }
        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};


  
terminal IDENTIFIER, 
    BOOLEAN_OPERATOR, OPERATOR, ARITHMETICOP,
    RESERVED, 
    FLOATING_POINT_NUMERIC_LITERAL, INTEGER_NUMERIC_LITERAL, 
    SCIENTIFIC_NOTATION_NUMERIC_LITERAL,
    STRING_LITERAL, CHAR_LITERAL,NUMERIC_CHAR_LITERAL,
    OPEN_PARENTHESIS, CLOSE_PARENTHESIS,
    OTHER,
    MINUS_OP,
    //Reserved Words
    PROGRAM,
    ARRAY,
    BEGIN,
    BOOLEAN,
    CASE,
    CHAR,
    CONST,
    DO,
    ELSE,
    END,
    FALSE,
    FOR,
    FUNCTION,
    IF,
    INT,
    LONGINT,
    OF,
    PROCEDURE,
    READ,
    REPEAT,
    SHORTINT,
    STRING,
    THEN,
    TO,
    TRUE,
    UNTIL,
    VAR,
    WHILE,
    WRITE,

    EQUAL,
    LITERAL,
    SEMI,
    COMMA,
    MINUSOP,
    COLON,
    
    ERROR_COMMENT,
    ERROR_FLOATING_POINT,
    ERROR_IDENTIFIER,
    ERROR_INTEGER,
    ERROR_STRING,
    ERROR_INVALID_CHARACTER,
    ERROR_INVALID_LENGTH;

terminal String ID;

non terminal program,constants,constants_body,
            globals, globals_body, globals_list,
            Type,functions,function_header,
            parameter_list, parameter_list_call,
            function_body,
            statements,if_statement,cond,
            else_statement,while_statement,
            for_statement,exp,assignment,
            fun_call,//fun_def,
            read,write,
            exp1,exp2,cond2, literal, 
            procedure_header,statement,
            recovery,literal_const;

precedence left ARITHMETICOP, BOOLEAN_OPERATOR, EQUAL, MINUSOP,IDENTIFIER,BEGIN,COMMA,COLON;


//start with program;
program ::= PROGRAM IDENTIFIER constants globals functions BEGIN statements END
           | PROGRAM IDENTIFIER globals constants functions BEGIN statements END
           | PROGRAM IDENTIFIER constants functions BEGIN statements END
           | PROGRAM IDENTIFIER globals functions BEGIN statements END
           | PROGRAM IDENTIFIER functions BEGIN statements END
           | PROGRAM IDENTIFIER BEGIN statements END
           | error:e {:
                parser.report_error("Error fatal :(", e); 
           :} ;



//recovery :: END;

constants ::= CONST constants_body;

constants_body ::= IDENTIFIER:i EQUAL  {:SemanticActions.rememberConst(i.toString());:}  literal_const SEMI constants_body
                    |  IDENTIFIER EQUAL error:e SEMI {: parser.report_error("Error al declarar una constante\n", e);:}
                    | /*epsilon*/;


literal_const ::= FLOATING_POINT_NUMERIC_LITERAL:li {:SemanticActions.insertConstTS(li.toString());:} | 
        INTEGER_NUMERIC_LITERAL:li {:SemanticActions.insertConstTS(li.toString());:}  | 
        SCIENTIFIC_NOTATION_NUMERIC_LITERAL:li {:SemanticActions.insertConstTS(li.toString());:}   | 
        STRING_LITERAL:li {:SemanticActions.insertConstTS(li.toString());:} 
        | NUMERIC_CHAR_LITERAL:li {:SemanticActions.insertConstTS(li.toString());:}   
        | CHAR_LITERAL:li {:SemanticActions.insertConstTS(li.toString());:}  ;



globals ::= VAR globals_body ;


globals_body ::= /*epsilon*/ | IDENTIFIER:i  {:SemanticActions.rememberVar(i.toString());:}  globals_list COLON Type SEMI {:SemanticActions.insertVarST();:} globals_body /* 
                 |  IDENTIFIER globals_list COLON error:e SEMI globals_body {: parser.report_error("Tipo no existe\n", e); :} 
                 |  error:e SEMI {: 
                                  parser.report_error("Error en VAR\n", e); 
                                   :}*/
                ;


globals_list ::= COMMA IDENTIFIER:i {:SemanticActions.rememberVar(i.toString());:} globals_list 
                | /*epsilon*/;


Type ::= INT:t {:SemanticActions.rememberType(t.toString());:} 
        | CHAR:t {:SemanticActions.rememberType(t.toString());:}
        | STRING:t {:SemanticActions.rememberType(t.toString());:};


functions ::= FUNCTION function_header functions| PROCEDURE procedure_header functions | FUNCTION error:e END {:
                                                               parser.report_error("Error al declarar la funcion\n", e); 
                                                               :}  
                                                                | PROCEDURE error:e END {:
                                                                    parser.report_error("Error al declarar la funcion\n", e); 
                                                               :}
                                                                |/*epsilon*/ 
                                                                
                                                                ;


function_header ::= IDENTIFIER:i OPEN_PARENTHESIS {:SemanticActions.rememberVar(i.toString());:} 
                    CLOSE_PARENTHESIS COLON Type {:SemanticActions.insertFunctionST();:} function_body BEGIN statements END 
                    |
                    IDENTIFIER:i OPEN_PARENTHESIS {:SemanticActions.rememberVar(i.toString());:} 
                            Type IDENTIFIER:i2 {:SemanticActions.rememberVar(i2.toString());:} 
                            parameter_list CLOSE_PARENTHESIS COLON Type {:SemanticActions.insertFunctionST();:} function_body BEGIN statements END 

                   /*| IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS error:e BEGIN function_body END{:
                        parser.report_error("Tipo de retorno no especificado en la funcion\n", e); 
                   :}
                   | IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER error:e CLOSE_PARENTHESIS COLON Type BEGIN function_body END{:
                        parser.report_error("Error en los argumentos de la funcion\n", e); 
                   :}
                   | IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS COLON Type BEGIN error:e END 
                   {:
                        parser.report_error("Error en el cuerpo de la funcion\n", e); 
                    :}*/;


procedure_header ::= IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS BEGIN function_body END |
                    IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN function_body END
                    | IDENTIFIER OPEN_PARENTHESIS error:e BEGIN function_body END{:
                        parser.report_error("Error en los argumentos de la procedimiento\n", e); 
                   :}
                   | IDENTIFIER OPEN_PARENTHESIS Type IDENTIFIER parameter_list CLOSE_PARENTHESIS BEGIN error:e END 
                   {:
                        parser.report_error("Error en el cuerpo de la procedimiento\n", e); 
                    :};

parameter_list ::= COMMA Type IDENTIFIER:i2 {:SemanticActions.rememberVar(i2.toString());:}  parameter_list | 
                COMMA error:e IDENTIFIER parameter_list{: 
                    parser.report_error("No especificado el tipo de un parametro\n", e); 
                :}
                | /*epsilon*/;


function_body ::= constants globals statements 
                 |globals constants statements 
                | globals statements 
                | constants statements 
                | statements;


statements ::= if_statement statements |while_statement statements|
                for_statement statements|assignment statements | fun_call statements|
                read statements |write statements| ;


if_statement ::= IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN statements else_statement END 
                | IF OPEN_PARENTHESIS error:e CLOSE_PARENTHESIS THEN statements else_statement END {:
                                                               parser.report_error("Error en la condicion IF\n", e); 
                                                               :}
                | IF  error:e CLOSE_PARENTHESIS THEN statements else_statement END {:
                                                               parser.report_error("Error en la condicion IF, falta parentesis\n", e); 
                                                               :}
                | IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN error:e END {:
                                                               parser.report_error("Syntax error en la condicion IF, falta parentesis\n", e); 
                                                               :}
                | IF OPEN_PARENTHESIS cond CLOSE_PARENTHESIS THEN BEGIN:e statements else_statement END {:
                                                               parser.report_error("Syntax error in line " + eleft + ": El if no lleva BEGIN\n", e); 
                                                               :}
                
                                                               ;
                                                            


cond ::= IDENTIFIER cond2| OPEN_PARENTHESIS cond CLOSE_PARENTHESIS cond2| 
        TRUE cond2| FALSE cond2 | literal cond2
         |fun_call cond2; 

cond2 ::= BOOLEAN_OPERATOR cond |EQUAL cond | /*epsilon*/ ;
         

else_statement ::= ELSE statements | /*epsilon*/ | ELSE BEGIN:e statements {:
                                                               parser.report_error("Syntax error in line " + eleft + ": El else no lleva BEGIN\n", e); 
                                                               :}
                                                               ;


while_statement ::= WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS  DO BEGIN statements END 
                    | WHILE error:e DO BEGIN statements END{:
                                                           parser.report_error("Error en la condicion en WHILE\n", e); 
                                                         :}
                    | WHILE OPEN_PARENTHESIS error:e CLOSE_PARENTHESIS DO BEGIN statements END{:
                                                           parser.report_error("Error en la condicion en WHILE\n", e); 
                                                         :}
                    | WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO BEGIN error:e END{:
                                                           parser.report_error("Error en statements en WHILE\n", e); 
                                                         :} 
                    | WHILE OPEN_PARENTHESIS cond CLOSE_PARENTHESIS DO error:e END{:
                                                           parser.report_error("Error en WHILE\n", e); 
                                                         :} 
                    | WHILE  error:e CLOSE_PARENTHESIS DO BEGIN statements END{:
                                                           parser.report_error("Error en la condicion en WHILE, falta parentesis\n", e); 
                                                         :}

                                                         ;


for_statement ::= FOR IDENTIFIER COLON EQUAL exp TO exp DO BEGIN statements END 
                | FOR error:e TO exp DO BEGIN statements END {: parser.report_error("Debe de asignar un valor\n", e); :}
                | FOR error:e END {: parser.report_error("Error en el FOR", e); :} ;

literal ::= FLOATING_POINT_NUMERIC_LITERAL:li {: SemanticActions.rememberConst(li.toString()); :}  | 
        INTEGER_NUMERIC_LITERAL:li {: SemanticActions.rememberConst(li.toString()); :}  | 
        SCIENTIFIC_NOTATION_NUMERIC_LITERAL:li {: SemanticActions.rememberConst(li.toString()); :}  | 
        STRING_LITERAL:li {: SemanticActions.rememberConst(li.toString()); :}   
        | NUMERIC_CHAR_LITERAL:li {: SemanticActions.rememberConst(li.toString()); :}  
        | CHAR_LITERAL:li {: SemanticActions.rememberConst(li.toString()); :}  ;


exp ::= exp1 exp2 {:SemanticActions.binaryEvaluation();:};

exp1 ::= IDENTIFIER:i {:SemanticActions.rememberVariable(i.toString());:}  
        | ARITHMETICOP IDENTIFIER:i {:SemanticActions.rememberVariable(i.toString());:}  | 
        OPEN_PARENTHESIS exp CLOSE_PARENTHESIS | TRUE | FALSE |  
        literal | fun_call | MINUSOP exp;

exp2 ::= BOOLEAN_OPERATOR:op {:SemanticActions.rememberOperator(op.toString());:} exp exp2 
        | ARITHMETICOP:op {:SemanticActions.rememberOperator(op.toString());:} exp exp2 | 
           EQUAL exp exp2 //| MINUSOP exp exp2 | ARITHMETICOP
            | /*epsilon*/ ;


fun_call ::= IDENTIFIER OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI
        | IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI
        | IDENTIFIER OPEN_PARENTHESIS error:e CLOSE_PARENTHESIS SEMI {: parser.report_error("Error en los parametros al llamar la funcion\n", e); :}
        | IDENTIFIER  error:e CLOSE_PARENTHESIS SEMI {: parser.report_error("Error en los parametros al llamar la funcion\n", e); :}
        //| IDENTIFIER  error:e  SEMI {: parser.report_error("Error en los parametros al llamar la funcion\n", e); :}
        | IDENTIFIER  OPEN_PARENTHESIS error:e SEMI {: parser.report_error("Error en los parentesis al llamar la funcion\n", e); :}
        ;




parameter_list_call ::= /*epsilon*/ | COMMA exp parameter_list_call ;

assignment ::= IDENTIFIER COLON EQUAL exp SEMI 
            | IDENTIFIER COLON EQUAL error:e SEMI {:
                                                    parser.report_error("Error en la asignacion\n", e); 
                                                  :}
            | IDENTIFIER error:e SEMI {:parser.report_error("Error en la asignacion\n", e); :}
             
            ;




read ::= READ OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS SEMI
        |READ OPEN_PARENTHESIS CLOSE_PARENTHESIS SEMI
        |READ OPEN_PARENTHESIS error:e CLOSE_PARENTHESIS SEMI{:parser.report_error("Error en el READ\n", e);:}

        ;

write ::= WRITE OPEN_PARENTHESIS exp parameter_list_call CLOSE_PARENTHESIS SEMI
            | WRITE OPEN_PARENTHESIS error:e CLOSE_PARENTHESIS SEMI {:parser.report_error("Error en el WRITE: se necesita al menos un parametro\n", e);:};








